/* 
 * Automated Music Promoter
 *
 * acba automated music promoter
 *
 * OpenAPI spec version: 2.0
 * Contact: support@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StoredFunctionParam
    /// </summary>
    [DataContract]
    public partial class StoredFunctionParam :  IEquatable<StoredFunctionParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredFunctionParam" /> class.
        /// </summary>
        /// <param name="Name">Name of the parameter, required for OUT and INOUT types, must be the same as the stored procedure&#39;s parameter name..</param>
        /// <param name="Value">Value of the parameter, used for the IN and INOUT types, defaults to NULL..</param>
        public StoredFunctionParam(string Name = default(string), string Value = default(string))
        {
            this.Name = Name;
            this.Value = Value;
        }
        
        /// <summary>
        /// Name of the parameter, required for OUT and INOUT types, must be the same as the stored procedure&#39;s parameter name.
        /// </summary>
        /// <value>Name of the parameter, required for OUT and INOUT types, must be the same as the stored procedure&#39;s parameter name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Value of the parameter, used for the IN and INOUT types, defaults to NULL.
        /// </summary>
        /// <value>Value of the parameter, used for the IN and INOUT types, defaults to NULL.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoredFunctionParam {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StoredFunctionParam);
        }

        /// <summary>
        /// Returns true if StoredFunctionParam instances are equal
        /// </summary>
        /// <param name="other">Instance of StoredFunctionParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredFunctionParam other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
