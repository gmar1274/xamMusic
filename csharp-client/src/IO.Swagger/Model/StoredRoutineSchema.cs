/* 
 * Automated Music Promoter
 *
 * acba automated music promoter
 *
 * OpenAPI spec version: 2.0
 * Contact: support@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StoredRoutineSchema
    /// </summary>
    [DataContract]
    public partial class StoredRoutineSchema :  IEquatable<StoredRoutineSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoredRoutineSchema" /> class.
        /// </summary>
        /// <param name="Name">Identifier/Name for the routine..</param>
        /// <param name="Label">Displayable name for the routine..</param>
        /// <param name="Description">Description for the routine..</param>
        /// <param name="ReturnType">Displayable plural name for the routine..</param>
        /// <param name="ReturnSchema">Field(s), if any, that represent the primary key of each record..</param>
        /// <param name="_Params">An array of available fields in each record..</param>
        public StoredRoutineSchema(string Name = default(string), string Label = default(string), string Description = default(string), string ReturnType = default(string), string ReturnSchema = default(string), List<StoredRoutineParameterSchema> _Params = default(List<StoredRoutineParameterSchema>))
        {
            this.Name = Name;
            this.Label = Label;
            this.Description = Description;
            this.ReturnType = ReturnType;
            this.ReturnSchema = ReturnSchema;
            this._Params = _Params;
        }
        
        /// <summary>
        /// Identifier/Name for the routine.
        /// </summary>
        /// <value>Identifier/Name for the routine.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Displayable name for the routine.
        /// </summary>
        /// <value>Displayable name for the routine.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Description for the routine.
        /// </summary>
        /// <value>Description for the routine.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Displayable plural name for the routine.
        /// </summary>
        /// <value>Displayable plural name for the routine.</value>
        [DataMember(Name="return_type", EmitDefaultValue=false)]
        public string ReturnType { get; set; }

        /// <summary>
        /// Field(s), if any, that represent the primary key of each record.
        /// </summary>
        /// <value>Field(s), if any, that represent the primary key of each record.</value>
        [DataMember(Name="return_schema", EmitDefaultValue=false)]
        public string ReturnSchema { get; set; }

        /// <summary>
        /// An array of available fields in each record.
        /// </summary>
        /// <value>An array of available fields in each record.</value>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public List<StoredRoutineParameterSchema> _Params { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoredRoutineSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReturnType: ").Append(ReturnType).Append("\n");
            sb.Append("  ReturnSchema: ").Append(ReturnSchema).Append("\n");
            sb.Append("  _Params: ").Append(_Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StoredRoutineSchema);
        }

        /// <summary>
        /// Returns true if StoredRoutineSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of StoredRoutineSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoredRoutineSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ReturnType == other.ReturnType ||
                    this.ReturnType != null &&
                    this.ReturnType.Equals(other.ReturnType)
                ) && 
                (
                    this.ReturnSchema == other.ReturnSchema ||
                    this.ReturnSchema != null &&
                    this.ReturnSchema.Equals(other.ReturnSchema)
                ) && 
                (
                    this._Params == other._Params ||
                    this._Params != null &&
                    this._Params.SequenceEqual(other._Params)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ReturnType != null)
                    hash = hash * 59 + this.ReturnType.GetHashCode();
                if (this.ReturnSchema != null)
                    hash = hash * 59 + this.ReturnSchema.GetHashCode();
                if (this._Params != null)
                    hash = hash * 59 + this._Params.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
