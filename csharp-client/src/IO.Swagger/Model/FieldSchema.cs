/* 
 * Automated Music Promoter
 *
 * acba automated music promoter
 *
 * OpenAPI spec version: 2.0
 * Contact: support@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FieldSchema
    /// </summary>
    [DataContract]
    public partial class FieldSchema :  IEquatable<FieldSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldSchema" /> class.
        /// </summary>
        /// <param name="Name">The API name of the field..</param>
        /// <param name="Label">The displayable label for the field..</param>
        /// <param name="Type">The DreamFactory abstract data type for this field..</param>
        /// <param name="DbType">The native database type used for this field..</param>
        /// <param name="Length">The maximum length allowed (in characters for string, displayed for numbers)..</param>
        /// <param name="Precision">Total number of places for numbers..</param>
        /// <param name="Scale">Number of decimal places allowed for numbers..</param>
        /// <param name="DefaultValue">Default value for this field..</param>
        /// <param name="Required">Is a value required for record creation..</param>
        /// <param name="AllowNull">Is null allowed as a value..</param>
        /// <param name="FixedLength">Is the length fixed (not variable)..</param>
        /// <param name="SupportsMultibyte">Does the data type support multibyte characters..</param>
        /// <param name="AutoIncrement">Does the integer field value increment upon new record creation..</param>
        /// <param name="IsPrimaryKey">Is this field used as/part of the primary key..</param>
        /// <param name="IsForeignKey">Is this field used as a foreign key..</param>
        /// <param name="RefTable">For foreign keys, the referenced table name..</param>
        /// <param name="RefField">For foreign keys, the referenced table field name..</param>
        /// <param name="Validation">validations to be performed on this field..</param>
        /// <param name="Value">Selectable string values for client menus and picklist validation..</param>
        public FieldSchema(string Name = default(string), string Label = default(string), string Type = default(string), string DbType = default(string), int? Length = default(int?), int? Precision = default(int?), int? Scale = default(int?), string DefaultValue = default(string), bool? Required = default(bool?), bool? AllowNull = default(bool?), bool? FixedLength = default(bool?), bool? SupportsMultibyte = default(bool?), bool? AutoIncrement = default(bool?), bool? IsPrimaryKey = default(bool?), bool? IsForeignKey = default(bool?), string RefTable = default(string), string RefField = default(string), List<string> Validation = default(List<string>), List<string> Value = default(List<string>))
        {
            this.Name = Name;
            this.Label = Label;
            this.Type = Type;
            this.DbType = DbType;
            this.Length = Length;
            this.Precision = Precision;
            this.Scale = Scale;
            this.DefaultValue = DefaultValue;
            this.Required = Required;
            this.AllowNull = AllowNull;
            this.FixedLength = FixedLength;
            this.SupportsMultibyte = SupportsMultibyte;
            this.AutoIncrement = AutoIncrement;
            this.IsPrimaryKey = IsPrimaryKey;
            this.IsForeignKey = IsForeignKey;
            this.RefTable = RefTable;
            this.RefField = RefField;
            this.Validation = Validation;
            this.Value = Value;
        }
        
        /// <summary>
        /// The API name of the field.
        /// </summary>
        /// <value>The API name of the field.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The displayable label for the field.
        /// </summary>
        /// <value>The displayable label for the field.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// The DreamFactory abstract data type for this field.
        /// </summary>
        /// <value>The DreamFactory abstract data type for this field.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The native database type used for this field.
        /// </summary>
        /// <value>The native database type used for this field.</value>
        [DataMember(Name="db_type", EmitDefaultValue=false)]
        public string DbType { get; set; }

        /// <summary>
        /// The maximum length allowed (in characters for string, displayed for numbers).
        /// </summary>
        /// <value>The maximum length allowed (in characters for string, displayed for numbers).</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int? Length { get; set; }

        /// <summary>
        /// Total number of places for numbers.
        /// </summary>
        /// <value>Total number of places for numbers.</value>
        [DataMember(Name="precision", EmitDefaultValue=false)]
        public int? Precision { get; set; }

        /// <summary>
        /// Number of decimal places allowed for numbers.
        /// </summary>
        /// <value>Number of decimal places allowed for numbers.</value>
        [DataMember(Name="scale", EmitDefaultValue=false)]
        public int? Scale { get; set; }

        /// <summary>
        /// Default value for this field.
        /// </summary>
        /// <value>Default value for this field.</value>
        [DataMember(Name="default_value", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Is a value required for record creation.
        /// </summary>
        /// <value>Is a value required for record creation.</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Is null allowed as a value.
        /// </summary>
        /// <value>Is null allowed as a value.</value>
        [DataMember(Name="allow_null", EmitDefaultValue=false)]
        public bool? AllowNull { get; set; }

        /// <summary>
        /// Is the length fixed (not variable).
        /// </summary>
        /// <value>Is the length fixed (not variable).</value>
        [DataMember(Name="fixed_length", EmitDefaultValue=false)]
        public bool? FixedLength { get; set; }

        /// <summary>
        /// Does the data type support multibyte characters.
        /// </summary>
        /// <value>Does the data type support multibyte characters.</value>
        [DataMember(Name="supports_multibyte", EmitDefaultValue=false)]
        public bool? SupportsMultibyte { get; set; }

        /// <summary>
        /// Does the integer field value increment upon new record creation.
        /// </summary>
        /// <value>Does the integer field value increment upon new record creation.</value>
        [DataMember(Name="auto_increment", EmitDefaultValue=false)]
        public bool? AutoIncrement { get; set; }

        /// <summary>
        /// Is this field used as/part of the primary key.
        /// </summary>
        /// <value>Is this field used as/part of the primary key.</value>
        [DataMember(Name="is_primary_key", EmitDefaultValue=false)]
        public bool? IsPrimaryKey { get; set; }

        /// <summary>
        /// Is this field used as a foreign key.
        /// </summary>
        /// <value>Is this field used as a foreign key.</value>
        [DataMember(Name="is_foreign_key", EmitDefaultValue=false)]
        public bool? IsForeignKey { get; set; }

        /// <summary>
        /// For foreign keys, the referenced table name.
        /// </summary>
        /// <value>For foreign keys, the referenced table name.</value>
        [DataMember(Name="ref_table", EmitDefaultValue=false)]
        public string RefTable { get; set; }

        /// <summary>
        /// For foreign keys, the referenced table field name.
        /// </summary>
        /// <value>For foreign keys, the referenced table field name.</value>
        [DataMember(Name="ref_field", EmitDefaultValue=false)]
        public string RefField { get; set; }

        /// <summary>
        /// validations to be performed on this field.
        /// </summary>
        /// <value>validations to be performed on this field.</value>
        [DataMember(Name="validation", EmitDefaultValue=false)]
        public List<string> Validation { get; set; }

        /// <summary>
        /// Selectable string values for client menus and picklist validation.
        /// </summary>
        /// <value>Selectable string values for client menus and picklist validation.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public List<string> Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  AllowNull: ").Append(AllowNull).Append("\n");
            sb.Append("  FixedLength: ").Append(FixedLength).Append("\n");
            sb.Append("  SupportsMultibyte: ").Append(SupportsMultibyte).Append("\n");
            sb.Append("  AutoIncrement: ").Append(AutoIncrement).Append("\n");
            sb.Append("  IsPrimaryKey: ").Append(IsPrimaryKey).Append("\n");
            sb.Append("  IsForeignKey: ").Append(IsForeignKey).Append("\n");
            sb.Append("  RefTable: ").Append(RefTable).Append("\n");
            sb.Append("  RefField: ").Append(RefField).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FieldSchema);
        }

        /// <summary>
        /// Returns true if FieldSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.DbType == other.DbType ||
                    this.DbType != null &&
                    this.DbType.Equals(other.DbType)
                ) && 
                (
                    this.Length == other.Length ||
                    this.Length != null &&
                    this.Length.Equals(other.Length)
                ) && 
                (
                    this.Precision == other.Precision ||
                    this.Precision != null &&
                    this.Precision.Equals(other.Precision)
                ) && 
                (
                    this.Scale == other.Scale ||
                    this.Scale != null &&
                    this.Scale.Equals(other.Scale)
                ) && 
                (
                    this.DefaultValue == other.DefaultValue ||
                    this.DefaultValue != null &&
                    this.DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.AllowNull == other.AllowNull ||
                    this.AllowNull != null &&
                    this.AllowNull.Equals(other.AllowNull)
                ) && 
                (
                    this.FixedLength == other.FixedLength ||
                    this.FixedLength != null &&
                    this.FixedLength.Equals(other.FixedLength)
                ) && 
                (
                    this.SupportsMultibyte == other.SupportsMultibyte ||
                    this.SupportsMultibyte != null &&
                    this.SupportsMultibyte.Equals(other.SupportsMultibyte)
                ) && 
                (
                    this.AutoIncrement == other.AutoIncrement ||
                    this.AutoIncrement != null &&
                    this.AutoIncrement.Equals(other.AutoIncrement)
                ) && 
                (
                    this.IsPrimaryKey == other.IsPrimaryKey ||
                    this.IsPrimaryKey != null &&
                    this.IsPrimaryKey.Equals(other.IsPrimaryKey)
                ) && 
                (
                    this.IsForeignKey == other.IsForeignKey ||
                    this.IsForeignKey != null &&
                    this.IsForeignKey.Equals(other.IsForeignKey)
                ) && 
                (
                    this.RefTable == other.RefTable ||
                    this.RefTable != null &&
                    this.RefTable.Equals(other.RefTable)
                ) && 
                (
                    this.RefField == other.RefField ||
                    this.RefField != null &&
                    this.RefField.Equals(other.RefField)
                ) && 
                (
                    this.Validation == other.Validation ||
                    this.Validation != null &&
                    this.Validation.SequenceEqual(other.Validation)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.SequenceEqual(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.DbType != null)
                    hash = hash * 59 + this.DbType.GetHashCode();
                if (this.Length != null)
                    hash = hash * 59 + this.Length.GetHashCode();
                if (this.Precision != null)
                    hash = hash * 59 + this.Precision.GetHashCode();
                if (this.Scale != null)
                    hash = hash * 59 + this.Scale.GetHashCode();
                if (this.DefaultValue != null)
                    hash = hash * 59 + this.DefaultValue.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.AllowNull != null)
                    hash = hash * 59 + this.AllowNull.GetHashCode();
                if (this.FixedLength != null)
                    hash = hash * 59 + this.FixedLength.GetHashCode();
                if (this.SupportsMultibyte != null)
                    hash = hash * 59 + this.SupportsMultibyte.GetHashCode();
                if (this.AutoIncrement != null)
                    hash = hash * 59 + this.AutoIncrement.GetHashCode();
                if (this.IsPrimaryKey != null)
                    hash = hash * 59 + this.IsPrimaryKey.GetHashCode();
                if (this.IsForeignKey != null)
                    hash = hash * 59 + this.IsForeignKey.GetHashCode();
                if (this.RefTable != null)
                    hash = hash * 59 + this.RefTable.GetHashCode();
                if (this.RefField != null)
                    hash = hash * 59 + this.RefField.GetHashCode();
                if (this.Validation != null)
                    hash = hash * 59 + this.Validation.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
