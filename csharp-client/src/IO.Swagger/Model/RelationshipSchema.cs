/* 
 * Automated Music Promoter
 *
 * acba automated music promoter
 *
 * OpenAPI spec version: 2.0
 * Contact: support@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RelationshipSchema
    /// </summary>
    [DataContract]
    public partial class RelationshipSchema :  IEquatable<RelationshipSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelationshipSchema" /> class.
        /// </summary>
        /// <param name="Name">Name of the relationship..</param>
        /// <param name="Alias">Alias to use in the API to override the name the relationship..</param>
        /// <param name="Label">Label for the relationship..</param>
        /// <param name="Description">Description of the relationship..</param>
        /// <param name="Type">Relationship type - belongs_to, has_many, many_many..</param>
        /// <param name="Field">The current table field that is used in the relationship..</param>
        /// <param name="RefTable">The table name that is referenced by the relationship..</param>
        /// <param name="RefField">The field name that is referenced by the relationship..</param>
        /// <param name="JunctionTable">The intermediate junction table used for many_many relationships..</param>
        /// <param name="JunctionField">The intermediate junction table field used for many_many relationships..</param>
        /// <param name="JunctionRefField">The intermediate joining table referencing field used for many_many relationships..</param>
        /// <param name="AlwaysFetch">Always fetch this relationship when querying the parent table..</param>
        public RelationshipSchema(string Name = default(string), string Alias = default(string), string Label = default(string), string Description = default(string), string Type = default(string), string Field = default(string), string RefTable = default(string), string RefField = default(string), string JunctionTable = default(string), string JunctionField = default(string), string JunctionRefField = default(string), bool? AlwaysFetch = default(bool?))
        {
            this.Name = Name;
            this.Alias = Alias;
            this.Label = Label;
            this.Description = Description;
            this.Type = Type;
            this.Field = Field;
            this.RefTable = RefTable;
            this.RefField = RefField;
            this.JunctionTable = JunctionTable;
            this.JunctionField = JunctionField;
            this.JunctionRefField = JunctionRefField;
            this.AlwaysFetch = AlwaysFetch;
        }
        
        /// <summary>
        /// Name of the relationship.
        /// </summary>
        /// <value>Name of the relationship.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Alias to use in the API to override the name the relationship.
        /// </summary>
        /// <value>Alias to use in the API to override the name the relationship.</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Label for the relationship.
        /// </summary>
        /// <value>Label for the relationship.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Description of the relationship.
        /// </summary>
        /// <value>Description of the relationship.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Relationship type - belongs_to, has_many, many_many.
        /// </summary>
        /// <value>Relationship type - belongs_to, has_many, many_many.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The current table field that is used in the relationship.
        /// </summary>
        /// <value>The current table field that is used in the relationship.</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// The table name that is referenced by the relationship.
        /// </summary>
        /// <value>The table name that is referenced by the relationship.</value>
        [DataMember(Name="ref_table", EmitDefaultValue=false)]
        public string RefTable { get; set; }

        /// <summary>
        /// The field name that is referenced by the relationship.
        /// </summary>
        /// <value>The field name that is referenced by the relationship.</value>
        [DataMember(Name="ref_field", EmitDefaultValue=false)]
        public string RefField { get; set; }

        /// <summary>
        /// The intermediate junction table used for many_many relationships.
        /// </summary>
        /// <value>The intermediate junction table used for many_many relationships.</value>
        [DataMember(Name="junction_table", EmitDefaultValue=false)]
        public string JunctionTable { get; set; }

        /// <summary>
        /// The intermediate junction table field used for many_many relationships.
        /// </summary>
        /// <value>The intermediate junction table field used for many_many relationships.</value>
        [DataMember(Name="junction_field", EmitDefaultValue=false)]
        public string JunctionField { get; set; }

        /// <summary>
        /// The intermediate joining table referencing field used for many_many relationships.
        /// </summary>
        /// <value>The intermediate joining table referencing field used for many_many relationships.</value>
        [DataMember(Name="junction_ref_field", EmitDefaultValue=false)]
        public string JunctionRefField { get; set; }

        /// <summary>
        /// Always fetch this relationship when querying the parent table.
        /// </summary>
        /// <value>Always fetch this relationship when querying the parent table.</value>
        [DataMember(Name="always_fetch", EmitDefaultValue=false)]
        public bool? AlwaysFetch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RelationshipSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  RefTable: ").Append(RefTable).Append("\n");
            sb.Append("  RefField: ").Append(RefField).Append("\n");
            sb.Append("  JunctionTable: ").Append(JunctionTable).Append("\n");
            sb.Append("  JunctionField: ").Append(JunctionField).Append("\n");
            sb.Append("  JunctionRefField: ").Append(JunctionRefField).Append("\n");
            sb.Append("  AlwaysFetch: ").Append(AlwaysFetch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RelationshipSchema);
        }

        /// <summary>
        /// Returns true if RelationshipSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of RelationshipSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelationshipSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Alias == other.Alias ||
                    this.Alias != null &&
                    this.Alias.Equals(other.Alias)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Field == other.Field ||
                    this.Field != null &&
                    this.Field.Equals(other.Field)
                ) && 
                (
                    this.RefTable == other.RefTable ||
                    this.RefTable != null &&
                    this.RefTable.Equals(other.RefTable)
                ) && 
                (
                    this.RefField == other.RefField ||
                    this.RefField != null &&
                    this.RefField.Equals(other.RefField)
                ) && 
                (
                    this.JunctionTable == other.JunctionTable ||
                    this.JunctionTable != null &&
                    this.JunctionTable.Equals(other.JunctionTable)
                ) && 
                (
                    this.JunctionField == other.JunctionField ||
                    this.JunctionField != null &&
                    this.JunctionField.Equals(other.JunctionField)
                ) && 
                (
                    this.JunctionRefField == other.JunctionRefField ||
                    this.JunctionRefField != null &&
                    this.JunctionRefField.Equals(other.JunctionRefField)
                ) && 
                (
                    this.AlwaysFetch == other.AlwaysFetch ||
                    this.AlwaysFetch != null &&
                    this.AlwaysFetch.Equals(other.AlwaysFetch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Alias != null)
                    hash = hash * 59 + this.Alias.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Field != null)
                    hash = hash * 59 + this.Field.GetHashCode();
                if (this.RefTable != null)
                    hash = hash * 59 + this.RefTable.GetHashCode();
                if (this.RefField != null)
                    hash = hash * 59 + this.RefField.GetHashCode();
                if (this.JunctionTable != null)
                    hash = hash * 59 + this.JunctionTable.GetHashCode();
                if (this.JunctionField != null)
                    hash = hash * 59 + this.JunctionField.GetHashCode();
                if (this.JunctionRefField != null)
                    hash = hash * 59 + this.JunctionRefField.GetHashCode();
                if (this.AlwaysFetch != null)
                    hash = hash * 59 + this.AlwaysFetch.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
