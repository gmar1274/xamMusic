/* 
 * Automated Music Promoter
 *
 * acba automated music promoter
 *
 * OpenAPI spec version: 2.0
 * Contact: support@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TableSchema
    /// </summary>
    [DataContract]
    public partial class TableSchema :  IEquatable<TableSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableSchema" /> class.
        /// </summary>
        /// <param name="Name">Identifier/Name for the table..</param>
        /// <param name="Label">Displayable singular name for the table..</param>
        /// <param name="Plural">Displayable plural name for the table..</param>
        /// <param name="PrimaryKey">Field(s), if any, that represent the primary key of each record..</param>
        /// <param name="NameField">Field(s), if any, that represent the name of each record..</param>
        /// <param name="Field">An array of available fields in each record..</param>
        /// <param name="Related">An array of available relationships to other tables..</param>
        public TableSchema(string Name = default(string), string Label = default(string), string Plural = default(string), string PrimaryKey = default(string), string NameField = default(string), List<FieldSchema> Field = default(List<FieldSchema>), List<RelationshipSchema> Related = default(List<RelationshipSchema>))
        {
            this.Name = Name;
            this.Label = Label;
            this.Plural = Plural;
            this.PrimaryKey = PrimaryKey;
            this.NameField = NameField;
            this.Field = Field;
            this.Related = Related;
        }
        
        /// <summary>
        /// Identifier/Name for the table.
        /// </summary>
        /// <value>Identifier/Name for the table.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Displayable singular name for the table.
        /// </summary>
        /// <value>Displayable singular name for the table.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Displayable plural name for the table.
        /// </summary>
        /// <value>Displayable plural name for the table.</value>
        [DataMember(Name="plural", EmitDefaultValue=false)]
        public string Plural { get; set; }

        /// <summary>
        /// Field(s), if any, that represent the primary key of each record.
        /// </summary>
        /// <value>Field(s), if any, that represent the primary key of each record.</value>
        [DataMember(Name="primary_key", EmitDefaultValue=false)]
        public string PrimaryKey { get; set; }

        /// <summary>
        /// Field(s), if any, that represent the name of each record.
        /// </summary>
        /// <value>Field(s), if any, that represent the name of each record.</value>
        [DataMember(Name="name_field", EmitDefaultValue=false)]
        public string NameField { get; set; }

        /// <summary>
        /// An array of available fields in each record.
        /// </summary>
        /// <value>An array of available fields in each record.</value>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public List<FieldSchema> Field { get; set; }

        /// <summary>
        /// An array of available relationships to other tables.
        /// </summary>
        /// <value>An array of available relationships to other tables.</value>
        [DataMember(Name="related", EmitDefaultValue=false)]
        public List<RelationshipSchema> Related { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Plural: ").Append(Plural).Append("\n");
            sb.Append("  PrimaryKey: ").Append(PrimaryKey).Append("\n");
            sb.Append("  NameField: ").Append(NameField).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Related: ").Append(Related).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TableSchema);
        }

        /// <summary>
        /// Returns true if TableSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of TableSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableSchema other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Plural == other.Plural ||
                    this.Plural != null &&
                    this.Plural.Equals(other.Plural)
                ) && 
                (
                    this.PrimaryKey == other.PrimaryKey ||
                    this.PrimaryKey != null &&
                    this.PrimaryKey.Equals(other.PrimaryKey)
                ) && 
                (
                    this.NameField == other.NameField ||
                    this.NameField != null &&
                    this.NameField.Equals(other.NameField)
                ) && 
                (
                    this.Field == other.Field ||
                    this.Field != null &&
                    this.Field.SequenceEqual(other.Field)
                ) && 
                (
                    this.Related == other.Related ||
                    this.Related != null &&
                    this.Related.SequenceEqual(other.Related)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.Plural != null)
                    hash = hash * 59 + this.Plural.GetHashCode();
                if (this.PrimaryKey != null)
                    hash = hash * 59 + this.PrimaryKey.GetHashCode();
                if (this.NameField != null)
                    hash = hash * 59 + this.NameField.GetHashCode();
                if (this.Field != null)
                    hash = hash * 59 + this.Field.GetHashCode();
                if (this.Related != null)
                    hash = hash * 59 + this.Related.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
