/* 
 * Automated Music Promoter
 *
 * acba automated music promoter
 *
 * OpenAPI spec version: 2.0
 * Contact: support@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMusic_promoterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Call a stored function.
        /// </summary>
        /// <remarks>
        /// Call a stored function with no parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredFunctionResponse</returns>
        StoredFunctionResponse CallMusicPromoterStoredFunction (string functionName, string returns = null);

        /// <summary>
        /// Call a stored function.
        /// </summary>
        /// <remarks>
        /// Call a stored function with no parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredFunctionResponse</returns>
        ApiResponse<StoredFunctionResponse> CallMusicPromoterStoredFunctionWithHttpInfo (string functionName, string returns = null);
        /// <summary>
        /// Call a stored function with parameters.
        /// </summary>
        /// <remarks>
        /// Call a stored function with parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredFunctionResponse</returns>
        StoredFunctionResponse CallMusicPromoterStoredFunctionWithParams (string functionName, string returns = null);

        /// <summary>
        /// Call a stored function with parameters.
        /// </summary>
        /// <remarks>
        /// Call a stored function with parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredFunctionResponse</returns>
        ApiResponse<StoredFunctionResponse> CallMusicPromoterStoredFunctionWithParamsWithHttpInfo (string functionName, string returns = null);
        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredProcedureResponse</returns>
        StoredProcedureResponse CallMusicPromoterStoredProcedure (string procedureName, string wrapper = null, string returns = null);

        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredProcedureResponse</returns>
        ApiResponse<StoredProcedureResponse> CallMusicPromoterStoredProcedureWithHttpInfo (string procedureName, string wrapper = null, string returns = null);
        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredProcedureResponse</returns>
        StoredProcedureResponse CallMusicPromoterStoredProcedureWithParams (string procedureName, string wrapper = null, string returns = null);

        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredProcedureResponse</returns>
        ApiResponse<StoredProcedureResponse> CallMusicPromoterStoredProcedureWithParamsWithHttpInfo (string procedureName, string wrapper = null, string returns = null);
        /// <summary>
        /// Create table fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success CreateMusicPromoterFields (string tableName);

        /// <summary>
        /// Create table fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> CreateMusicPromoterFieldsWithHttpInfo (string tableName);
        /// <summary>
        /// Create one or more records.
        /// </summary>
        /// <remarks>
        /// Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>RecordsResponse</returns>
        RecordsResponse CreateMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null);

        /// <summary>
        /// Create one or more records.
        /// </summary>
        /// <remarks>
        /// Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        ApiResponse<RecordsResponse> CreateMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null);
        /// <summary>
        /// Create table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success CreateMusicPromoterRelationships (string tableName);

        /// <summary>
        /// Create table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> CreateMusicPromoterRelationshipsWithHttpInfo (string tableName);
        /// <summary>
        /// Create a table with the given properties and fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success CreateMusicPromoterTable (string tableName);

        /// <summary>
        /// Create a table with the given properties and fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> CreateMusicPromoterTableWithHttpInfo (string tableName);
        /// <summary>
        /// Create one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TableSchemas</returns>
        TableSchemas CreateMusicPromoterTables ();

        /// <summary>
        /// Create one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TableSchemas</returns>
        ApiResponse<TableSchemas> CreateMusicPromoterTablesWithHttpInfo ();
        /// <summary>
        /// Remove the given field from the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table field/column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Success</returns>
        Success DeleteMusicPromoterField (string tableName, string fieldName);

        /// <summary>
        /// Remove the given field from the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table field/column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteMusicPromoterFieldWithHttpInfo (string tableName, string fieldName);
        /// <summary>
        /// Delete (aka drop) the given fields.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the table column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success DeleteMusicPromoterFields (string tableName);

        /// <summary>
        /// Delete (aka drop) the given fields.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the table column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteMusicPromoterFieldsWithHttpInfo (string tableName);
        /// <summary>
        /// Delete one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        RecordResponse DeleteMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Delete one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        ApiResponse<RecordResponse> DeleteMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Delete one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>RecordsResponse</returns>
        RecordsResponse DeleteMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null);

        /// <summary>
        /// Delete one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        ApiResponse<RecordsResponse> DeleteMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null);
        /// <summary>
        /// Remove the given relationship from the given table.
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the tables given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Success</returns>
        Success DeleteMusicPromoterRelationship (string tableName, string relationshipName);

        /// <summary>
        /// Remove the given relationship from the given table.
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the tables given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName);
        /// <summary>
        /// Delete the given table relationships.
        /// </summary>
        /// <remarks>
        /// Removes the relationships between tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success DeleteMusicPromoterRelationships (string tableName);

        /// <summary>
        /// Delete the given table relationships.
        /// </summary>
        /// <remarks>
        /// Removes the relationships between tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteMusicPromoterRelationshipsWithHttpInfo (string tableName);
        /// <summary>
        /// Delete (aka drop) the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success DeleteMusicPromoterTable (string tableName);

        /// <summary>
        /// Delete (aka drop) the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> DeleteMusicPromoterTableWithHttpInfo (string tableName);
        /// <summary>
        /// Retrieve the definition of the given field for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the field and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>FieldSchema</returns>
        FieldSchema DescribeMusicPromoterField (string tableName, string fieldName, bool? refresh = null);

        /// <summary>
        /// Retrieve the definition of the given field for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the field and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of FieldSchema</returns>
        ApiResponse<FieldSchema> DescribeMusicPromoterFieldWithHttpInfo (string tableName, string fieldName, bool? refresh = null);
        /// <summary>
        /// Retrieve table field definitions for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table&#39;s fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>FieldSchemas</returns>
        FieldSchemas DescribeMusicPromoterFields (string tableName, bool? refresh = null);

        /// <summary>
        /// Retrieve table field definitions for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table&#39;s fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of FieldSchemas</returns>
        ApiResponse<FieldSchemas> DescribeMusicPromoterFieldsWithHttpInfo (string tableName, bool? refresh = null);
        /// <summary>
        /// Retrieve the definition of the given relationship for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the relationship and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>RelationshipSchema</returns>
        RelationshipSchema DescribeMusicPromoterRelationship (string tableName, string relationshipName, bool? refresh = null);

        /// <summary>
        /// Retrieve the definition of the given relationship for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the relationship and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of RelationshipSchema</returns>
        ApiResponse<RelationshipSchema> DescribeMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName, bool? refresh = null);
        /// <summary>
        /// Retrieve relationships definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table relationships to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>RelationshipSchemas</returns>
        RelationshipSchemas DescribeMusicPromoterRelationships (string tableName, bool? refresh = null);

        /// <summary>
        /// Retrieve relationships definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table relationships to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of RelationshipSchemas</returns>
        ApiResponse<RelationshipSchemas> DescribeMusicPromoterRelationshipsWithHttpInfo (string tableName, bool? refresh = null);
        /// <summary>
        /// Retrieve table definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table, its fields and relations to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>TableSchema</returns>
        TableSchema DescribeMusicPromoterTable (string tableName, bool? refresh = null);

        /// <summary>
        /// Retrieve table definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table, its fields and relations to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of TableSchema</returns>
        ApiResponse<TableSchema> DescribeMusicPromoterTableWithHttpInfo (string tableName, bool? refresh = null);
        /// <summary>
        /// Retrieve one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        RecordResponse GetMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Retrieve one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        ApiResponse<RecordResponse> GetMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Retrieve one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>RecordsResponse</returns>
        RecordsResponse GetMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null);

        /// <summary>
        /// Retrieve one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        ApiResponse<RecordsResponse> GetMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null);
        /// <summary>
        /// Get resources for this service.
        /// </summary>
        /// <remarks>
        /// Return an array of the resources available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>MySqlDbs</returns>
        MySqlDbs GetMusicPromoterResources (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null);

        /// <summary>
        /// Get resources for this service.
        /// </summary>
        /// <remarks>
        /// Return an array of the resources available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of MySqlDbs</returns>
        ApiResponse<MySqlDbs> GetMusicPromoterResourcesWithHttpInfo (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null);
        /// <summary>
        /// Retrieve one or more Schemas.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>TableSchemas</returns>
        TableSchemas GetMusicPromoterSchemas (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more Schemas.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of TableSchemas</returns>
        ApiResponse<TableSchemas> GetMusicPromoterSchemasWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Retrieve one or more StoredFunctions.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>StoredRoutineSchemas</returns>
        StoredRoutineSchemas GetMusicPromoterStoredFunctions (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more StoredFunctions.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of StoredRoutineSchemas</returns>
        ApiResponse<StoredRoutineSchemas> GetMusicPromoterStoredFunctionsWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Retrieve one or more StoredProcedures.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>StoredRoutineSchemas</returns>
        StoredRoutineSchemas GetMusicPromoterStoredProcedures (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more StoredProcedures.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of StoredRoutineSchemas</returns>
        ApiResponse<StoredRoutineSchemas> GetMusicPromoterStoredProceduresWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Retrieve one or more Tables.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>TableSchemas</returns>
        TableSchemas GetMusicPromoterTables (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more Tables.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of TableSchemas</returns>
        ApiResponse<TableSchemas> GetMusicPromoterTablesWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Success</returns>
        Success ReplaceMusicPromoterField (string tableName, string fieldName);

        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ReplaceMusicPromoterFieldWithHttpInfo (string tableName, string fieldName);
        /// <summary>
        /// Update (replace) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success ReplaceMusicPromoterFields (string tableName);

        /// <summary>
        /// Update (replace) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ReplaceMusicPromoterFieldsWithHttpInfo (string tableName);
        /// <summary>
        /// Replace the content of one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        RecordResponse ReplaceMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Replace the content of one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        ApiResponse<RecordResponse> ReplaceMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Update (replace) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>RecordsResponse</returns>
        RecordsResponse ReplaceMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);

        /// <summary>
        /// Update (replace) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        ApiResponse<RecordsResponse> ReplaceMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);
        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Success</returns>
        Success ReplaceMusicPromoterRelationship (string tableName, string relationshipName);

        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ReplaceMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName);
        /// <summary>
        /// Update (replace) table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success ReplaceMusicPromoterRelationships (string tableName);

        /// <summary>
        /// Update (replace) table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ReplaceMusicPromoterRelationshipsWithHttpInfo (string tableName);
        /// <summary>
        /// Update (replace) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success ReplaceMusicPromoterTable (string tableName);

        /// <summary>
        /// Update (replace) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> ReplaceMusicPromoterTableWithHttpInfo (string tableName);
        /// <summary>
        /// Update (replace) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TableSchemas</returns>
        TableSchemas ReplaceMusicPromoterTables ();

        /// <summary>
        /// Update (replace) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TableSchemas</returns>
        ApiResponse<TableSchemas> ReplaceMusicPromoterTablesWithHttpInfo ();
        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Success</returns>
        Success UpdateMusicPromoterField (string tableName, string fieldName);

        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateMusicPromoterFieldWithHttpInfo (string tableName, string fieldName);
        /// <summary>
        /// Update (patch) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success UpdateMusicPromoterFields (string tableName);

        /// <summary>
        /// Update (patch) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateMusicPromoterFieldsWithHttpInfo (string tableName);
        /// <summary>
        /// Update (patch) one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        RecordResponse UpdateMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Update (patch) one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        ApiResponse<RecordResponse> UpdateMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Update (patch) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>RecordsResponse</returns>
        RecordsResponse UpdateMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);

        /// <summary>
        /// Update (patch) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        ApiResponse<RecordsResponse> UpdateMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);
        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Success</returns>
        Success UpdateMusicPromoterRelationship (string tableName, string relationshipName);

        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName);
        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success UpdateMusicPromoterRelationships (string tableName);

        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateMusicPromoterRelationshipsWithHttpInfo (string tableName);
        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        Success UpdateMusicPromoterTable (string tableName);

        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        ApiResponse<Success> UpdateMusicPromoterTableWithHttpInfo (string tableName);
        /// <summary>
        /// Update (patch) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TableSchemas</returns>
        TableSchemas UpdateMusicPromoterTables ();

        /// <summary>
        /// Update (patch) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TableSchemas</returns>
        ApiResponse<TableSchemas> UpdateMusicPromoterTablesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Call a stored function.
        /// </summary>
        /// <remarks>
        /// Call a stored function with no parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredFunctionResponse</returns>
        System.Threading.Tasks.Task<StoredFunctionResponse> CallMusicPromoterStoredFunctionAsync (string functionName, string returns = null);

        /// <summary>
        /// Call a stored function.
        /// </summary>
        /// <remarks>
        /// Call a stored function with no parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredFunctionResponse>> CallMusicPromoterStoredFunctionAsyncWithHttpInfo (string functionName, string returns = null);
        /// <summary>
        /// Call a stored function with parameters.
        /// </summary>
        /// <remarks>
        /// Call a stored function with parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredFunctionResponse</returns>
        System.Threading.Tasks.Task<StoredFunctionResponse> CallMusicPromoterStoredFunctionWithParamsAsync (string functionName, string returns = null);

        /// <summary>
        /// Call a stored function with parameters.
        /// </summary>
        /// <remarks>
        /// Call a stored function with parameters. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredFunctionResponse>> CallMusicPromoterStoredFunctionWithParamsAsyncWithHttpInfo (string functionName, string returns = null);
        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredProcedureResponse</returns>
        System.Threading.Tasks.Task<StoredProcedureResponse> CallMusicPromoterStoredProcedureAsync (string procedureName, string wrapper = null, string returns = null);

        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredProcedureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredProcedureResponse>> CallMusicPromoterStoredProcedureAsyncWithHttpInfo (string procedureName, string wrapper = null, string returns = null);
        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredProcedureResponse</returns>
        System.Threading.Tasks.Task<StoredProcedureResponse> CallMusicPromoterStoredProcedureWithParamsAsync (string procedureName, string wrapper = null, string returns = null);

        /// <summary>
        /// Call a stored procedure.
        /// </summary>
        /// <remarks>
        /// Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredProcedureResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredProcedureResponse>> CallMusicPromoterStoredProcedureWithParamsAsyncWithHttpInfo (string procedureName, string wrapper = null, string returns = null);
        /// <summary>
        /// Create table fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> CreateMusicPromoterFieldsAsync (string tableName);

        /// <summary>
        /// Create table fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> CreateMusicPromoterFieldsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Create one or more records.
        /// </summary>
        /// <remarks>
        /// Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        System.Threading.Tasks.Task<RecordsResponse> CreateMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null);

        /// <summary>
        /// Create one or more records.
        /// </summary>
        /// <remarks>
        /// Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> CreateMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null);
        /// <summary>
        /// Create table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> CreateMusicPromoterRelationshipsAsync (string tableName);

        /// <summary>
        /// Create table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> CreateMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Create a table with the given properties and fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> CreateMusicPromoterTableAsync (string tableName);

        /// <summary>
        /// Create a table with the given properties and fields.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> CreateMusicPromoterTableAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Create one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TableSchemas</returns>
        System.Threading.Tasks.Task<TableSchemas> CreateMusicPromoterTablesAsync ();

        /// <summary>
        /// Create one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableSchemas>> CreateMusicPromoterTablesAsyncWithHttpInfo ();
        /// <summary>
        /// Remove the given field from the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table field/column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteMusicPromoterFieldAsync (string tableName, string fieldName);

        /// <summary>
        /// Remove the given field from the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table field/column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName);
        /// <summary>
        /// Delete (aka drop) the given fields.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the table column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteMusicPromoterFieldsAsync (string tableName);

        /// <summary>
        /// Delete (aka drop) the given fields.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the table column and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterFieldsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Delete one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        System.Threading.Tasks.Task<RecordResponse> DeleteMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Delete one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordResponse>> DeleteMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Delete one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        System.Threading.Tasks.Task<RecordsResponse> DeleteMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null);

        /// <summary>
        /// Delete one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> DeleteMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null);
        /// <summary>
        /// Remove the given relationship from the given table.
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the tables given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteMusicPromoterRelationshipAsync (string tableName, string relationshipName);

        /// <summary>
        /// Remove the given relationship from the given table.
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the tables given.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName);
        /// <summary>
        /// Delete the given table relationships.
        /// </summary>
        /// <remarks>
        /// Removes the relationships between tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteMusicPromoterRelationshipsAsync (string tableName);

        /// <summary>
        /// Delete the given table relationships.
        /// </summary>
        /// <remarks>
        /// Removes the relationships between tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Delete (aka drop) the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> DeleteMusicPromoterTableAsync (string tableName);

        /// <summary>
        /// Delete (aka drop) the given table.
        /// </summary>
        /// <remarks>
        /// Careful, this drops the database table and all of its contents.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterTableAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Retrieve the definition of the given field for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the field and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of FieldSchema</returns>
        System.Threading.Tasks.Task<FieldSchema> DescribeMusicPromoterFieldAsync (string tableName, string fieldName, bool? refresh = null);

        /// <summary>
        /// Retrieve the definition of the given field for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the field and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (FieldSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldSchema>> DescribeMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName, bool? refresh = null);
        /// <summary>
        /// Retrieve table field definitions for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table&#39;s fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of FieldSchemas</returns>
        System.Threading.Tasks.Task<FieldSchemas> DescribeMusicPromoterFieldsAsync (string tableName, bool? refresh = null);

        /// <summary>
        /// Retrieve table field definitions for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table&#39;s fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (FieldSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldSchemas>> DescribeMusicPromoterFieldsAsyncWithHttpInfo (string tableName, bool? refresh = null);
        /// <summary>
        /// Retrieve the definition of the given relationship for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the relationship and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of RelationshipSchema</returns>
        System.Threading.Tasks.Task<RelationshipSchema> DescribeMusicPromoterRelationshipAsync (string tableName, string relationshipName, bool? refresh = null);

        /// <summary>
        /// Retrieve the definition of the given relationship for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the relationship and its properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (RelationshipSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelationshipSchema>> DescribeMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName, bool? refresh = null);
        /// <summary>
        /// Retrieve relationships definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table relationships to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of RelationshipSchemas</returns>
        System.Threading.Tasks.Task<RelationshipSchemas> DescribeMusicPromoterRelationshipsAsync (string tableName, bool? refresh = null);

        /// <summary>
        /// Retrieve relationships definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table relationships to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (RelationshipSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelationshipSchemas>> DescribeMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName, bool? refresh = null);
        /// <summary>
        /// Retrieve table definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table, its fields and relations to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of TableSchema</returns>
        System.Threading.Tasks.Task<TableSchema> DescribeMusicPromoterTableAsync (string tableName, bool? refresh = null);

        /// <summary>
        /// Retrieve table definition for the given table.
        /// </summary>
        /// <remarks>
        /// This describes the table, its fields and relations to other tables.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (TableSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableSchema>> DescribeMusicPromoterTableAsyncWithHttpInfo (string tableName, bool? refresh = null);
        /// <summary>
        /// Retrieve one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        System.Threading.Tasks.Task<RecordResponse> GetMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Retrieve one record by identifier.
        /// </summary>
        /// <remarks>
        /// Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordResponse>> GetMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Retrieve one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        System.Threading.Tasks.Task<RecordsResponse> GetMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null);

        /// <summary>
        /// Retrieve one or more records.
        /// </summary>
        /// <remarks>
        /// Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> GetMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null);
        /// <summary>
        /// Get resources for this service.
        /// </summary>
        /// <remarks>
        /// Return an array of the resources available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of MySqlDbs</returns>
        System.Threading.Tasks.Task<MySqlDbs> GetMusicPromoterResourcesAsync (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null);

        /// <summary>
        /// Get resources for this service.
        /// </summary>
        /// <remarks>
        /// Return an array of the resources available.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (MySqlDbs)</returns>
        System.Threading.Tasks.Task<ApiResponse<MySqlDbs>> GetMusicPromoterResourcesAsyncWithHttpInfo (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null);
        /// <summary>
        /// Retrieve one or more Schemas.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of TableSchemas</returns>
        System.Threading.Tasks.Task<TableSchemas> GetMusicPromoterSchemasAsync (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more Schemas.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableSchemas>> GetMusicPromoterSchemasAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Retrieve one or more StoredFunctions.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of StoredRoutineSchemas</returns>
        System.Threading.Tasks.Task<StoredRoutineSchemas> GetMusicPromoterStoredFunctionsAsync (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more StoredFunctions.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (StoredRoutineSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredRoutineSchemas>> GetMusicPromoterStoredFunctionsAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Retrieve one or more StoredProcedures.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of StoredRoutineSchemas</returns>
        System.Threading.Tasks.Task<StoredRoutineSchemas> GetMusicPromoterStoredProceduresAsync (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more StoredProcedures.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (StoredRoutineSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoredRoutineSchemas>> GetMusicPromoterStoredProceduresAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Retrieve one or more Tables.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of TableSchemas</returns>
        System.Threading.Tasks.Task<TableSchemas> GetMusicPromoterTablesAsync (List<string> fields = null, List<int?> ids = null);

        /// <summary>
        /// Retrieve one or more Tables.
        /// </summary>
        /// <remarks>
        /// Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableSchemas>> GetMusicPromoterTablesAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null);
        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ReplaceMusicPromoterFieldAsync (string tableName, string fieldName);

        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName);
        /// <summary>
        /// Update (replace) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ReplaceMusicPromoterFieldsAsync (string tableName);

        /// <summary>
        /// Update (replace) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields and their properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterFieldsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Replace the content of one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        System.Threading.Tasks.Task<RecordResponse> ReplaceMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Replace the content of one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordResponse>> ReplaceMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Update (replace) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        System.Threading.Tasks.Task<RecordsResponse> ReplaceMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);

        /// <summary>
        /// Update (replace) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> ReplaceMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);
        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ReplaceMusicPromoterRelationshipAsync (string tableName, string relationshipName);

        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName);
        /// <summary>
        /// Update (replace) table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ReplaceMusicPromoterRelationshipsAsync (string tableName);

        /// <summary>
        /// Update (replace) table relationships with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Update (replace) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> ReplaceMusicPromoterTableAsync (string tableName);

        /// <summary>
        /// Update (replace) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterTableAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Update (replace) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TableSchemas</returns>
        System.Threading.Tasks.Task<TableSchemas> ReplaceMusicPromoterTablesAsync ();

        /// <summary>
        /// Update (replace) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableSchemas>> ReplaceMusicPromoterTablesAsyncWithHttpInfo ();
        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateMusicPromoterFieldAsync (string tableName, string fieldName);

        /// <summary>
        /// Update one field by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties for the given field.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName);
        /// <summary>
        /// Update (patch) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateMusicPromoterFieldsAsync (string tableName);

        /// <summary>
        /// Update (patch) table fields with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterFieldsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Update (patch) one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        System.Threading.Tasks.Task<RecordResponse> UpdateMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);

        /// <summary>
        /// Update (patch) one record by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordResponse>> UpdateMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null);
        /// <summary>
        /// Update (patch) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        System.Threading.Tasks.Task<RecordsResponse> UpdateMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);

        /// <summary>
        /// Update (patch) one or more records.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> UpdateMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null);
        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateMusicPromoterRelationshipAsync (string tableName, string relationshipName);

        /// <summary>
        /// Update one relationship by identifier.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of properties for the given relationship.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName);
        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateMusicPromoterRelationshipsAsync (string tableName);

        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of relationship properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        System.Threading.Tasks.Task<Success> UpdateMusicPromoterTableAsync (string tableName);

        /// <summary>
        /// Update (patch) a table with the given properties.
        /// </summary>
        /// <remarks>
        /// Post data should be an array of field properties.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterTableAsyncWithHttpInfo (string tableName);
        /// <summary>
        /// Update (patch) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TableSchemas</returns>
        System.Threading.Tasks.Task<TableSchemas> UpdateMusicPromoterTablesAsync ();

        /// <summary>
        /// Update (patch) one or more tables.
        /// </summary>
        /// <remarks>
        /// Post data should be a single table definition or an array of table definitions.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        System.Threading.Tasks.Task<ApiResponse<TableSchemas>> UpdateMusicPromoterTablesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Music_promoterApi : IMusic_promoterApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Music_promoterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public Music_promoterApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Music_promoterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Music_promoterApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Call a stored function. Call a stored function with no parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredFunctionResponse</returns>
        public StoredFunctionResponse CallMusicPromoterStoredFunction (string functionName, string returns = null)
        {
             ApiResponse<StoredFunctionResponse> localVarResponse = CallMusicPromoterStoredFunctionWithHttpInfo(functionName, returns);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Call a stored function. Call a stored function with no parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredFunctionResponse</returns>
        public ApiResponse< StoredFunctionResponse > CallMusicPromoterStoredFunctionWithHttpInfo (string functionName, string returns = null)
        {
            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new ApiException(400, "Missing required parameter 'functionName' when calling Music_promoterApi->CallMusicPromoterStoredFunction");

            var localVarPath = "/_func/{function_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (functionName != null) localVarPathParams.Add("function_name", Configuration.ApiClient.ParameterToString(functionName)); // path parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredFunction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredFunctionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredFunctionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredFunctionResponse)));
        }

        /// <summary>
        /// Call a stored function. Call a stored function with no parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredFunctionResponse</returns>
        public async System.Threading.Tasks.Task<StoredFunctionResponse> CallMusicPromoterStoredFunctionAsync (string functionName, string returns = null)
        {
             ApiResponse<StoredFunctionResponse> localVarResponse = await CallMusicPromoterStoredFunctionAsyncWithHttpInfo(functionName, returns);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Call a stored function. Call a stored function with no parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredFunctionResponse>> CallMusicPromoterStoredFunctionAsyncWithHttpInfo (string functionName, string returns = null)
        {
            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new ApiException(400, "Missing required parameter 'functionName' when calling Music_promoterApi->CallMusicPromoterStoredFunction");

            var localVarPath = "/_func/{function_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (functionName != null) localVarPathParams.Add("function_name", Configuration.ApiClient.ParameterToString(functionName)); // path parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredFunction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredFunctionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredFunctionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredFunctionResponse)));
        }

        /// <summary>
        /// Call a stored function with parameters. Call a stored function with parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredFunctionResponse</returns>
        public StoredFunctionResponse CallMusicPromoterStoredFunctionWithParams (string functionName, string returns = null)
        {
             ApiResponse<StoredFunctionResponse> localVarResponse = CallMusicPromoterStoredFunctionWithParamsWithHttpInfo(functionName, returns);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Call a stored function with parameters. Call a stored function with parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredFunctionResponse</returns>
        public ApiResponse< StoredFunctionResponse > CallMusicPromoterStoredFunctionWithParamsWithHttpInfo (string functionName, string returns = null)
        {
            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new ApiException(400, "Missing required parameter 'functionName' when calling Music_promoterApi->CallMusicPromoterStoredFunctionWithParams");

            var localVarPath = "/_func/{function_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (functionName != null) localVarPathParams.Add("function_name", Configuration.ApiClient.ParameterToString(functionName)); // path parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredFunctionWithParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredFunctionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredFunctionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredFunctionResponse)));
        }

        /// <summary>
        /// Call a stored function with parameters. Call a stored function with parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredFunctionResponse</returns>
        public async System.Threading.Tasks.Task<StoredFunctionResponse> CallMusicPromoterStoredFunctionWithParamsAsync (string functionName, string returns = null)
        {
             ApiResponse<StoredFunctionResponse> localVarResponse = await CallMusicPromoterStoredFunctionWithParamsAsyncWithHttpInfo(functionName, returns);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Call a stored function with parameters. Call a stored function with parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionName">Name of the stored function to call.</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredFunctionResponse>> CallMusicPromoterStoredFunctionWithParamsAsyncWithHttpInfo (string functionName, string returns = null)
        {
            // verify the required parameter 'functionName' is set
            if (functionName == null)
                throw new ApiException(400, "Missing required parameter 'functionName' when calling Music_promoterApi->CallMusicPromoterStoredFunctionWithParams");

            var localVarPath = "/_func/{function_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (functionName != null) localVarPathParams.Add("function_name", Configuration.ApiClient.ParameterToString(functionName)); // path parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredFunctionWithParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredFunctionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredFunctionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredFunctionResponse)));
        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredProcedureResponse</returns>
        public StoredProcedureResponse CallMusicPromoterStoredProcedure (string procedureName, string wrapper = null, string returns = null)
        {
             ApiResponse<StoredProcedureResponse> localVarResponse = CallMusicPromoterStoredProcedureWithHttpInfo(procedureName, wrapper, returns);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredProcedureResponse</returns>
        public ApiResponse< StoredProcedureResponse > CallMusicPromoterStoredProcedureWithHttpInfo (string procedureName, string wrapper = null, string returns = null)
        {
            // verify the required parameter 'procedureName' is set
            if (procedureName == null)
                throw new ApiException(400, "Missing required parameter 'procedureName' when calling Music_promoterApi->CallMusicPromoterStoredProcedure");

            var localVarPath = "/_proc/{procedure_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (procedureName != null) localVarPathParams.Add("procedure_name", Configuration.ApiClient.ParameterToString(procedureName)); // path parameter
            if (wrapper != null) localVarQueryParams.Add("wrapper", Configuration.ApiClient.ParameterToString(wrapper)); // query parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredProcedure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredProcedureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredProcedureResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredProcedureResponse)));
        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredProcedureResponse</returns>
        public async System.Threading.Tasks.Task<StoredProcedureResponse> CallMusicPromoterStoredProcedureAsync (string procedureName, string wrapper = null, string returns = null)
        {
             ApiResponse<StoredProcedureResponse> localVarResponse = await CallMusicPromoterStoredProcedureAsyncWithHttpInfo(procedureName, wrapper, returns);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredProcedureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredProcedureResponse>> CallMusicPromoterStoredProcedureAsyncWithHttpInfo (string procedureName, string wrapper = null, string returns = null)
        {
            // verify the required parameter 'procedureName' is set
            if (procedureName == null)
                throw new ApiException(400, "Missing required parameter 'procedureName' when calling Music_promoterApi->CallMusicPromoterStoredProcedure");

            var localVarPath = "/_proc/{procedure_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (procedureName != null) localVarPathParams.Add("procedure_name", Configuration.ApiClient.ParameterToString(procedureName)); // path parameter
            if (wrapper != null) localVarQueryParams.Add("wrapper", Configuration.ApiClient.ParameterToString(wrapper)); // query parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredProcedure", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredProcedureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredProcedureResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredProcedureResponse)));
        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>StoredProcedureResponse</returns>
        public StoredProcedureResponse CallMusicPromoterStoredProcedureWithParams (string procedureName, string wrapper = null, string returns = null)
        {
             ApiResponse<StoredProcedureResponse> localVarResponse = CallMusicPromoterStoredProcedureWithParamsWithHttpInfo(procedureName, wrapper, returns);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>ApiResponse of StoredProcedureResponse</returns>
        public ApiResponse< StoredProcedureResponse > CallMusicPromoterStoredProcedureWithParamsWithHttpInfo (string procedureName, string wrapper = null, string returns = null)
        {
            // verify the required parameter 'procedureName' is set
            if (procedureName == null)
                throw new ApiException(400, "Missing required parameter 'procedureName' when calling Music_promoterApi->CallMusicPromoterStoredProcedureWithParams");

            var localVarPath = "/_proc/{procedure_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (procedureName != null) localVarPathParams.Add("procedure_name", Configuration.ApiClient.ParameterToString(procedureName)); // path parameter
            if (wrapper != null) localVarQueryParams.Add("wrapper", Configuration.ApiClient.ParameterToString(wrapper)); // query parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredProcedureWithParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredProcedureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredProcedureResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredProcedureResponse)));
        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of StoredProcedureResponse</returns>
        public async System.Threading.Tasks.Task<StoredProcedureResponse> CallMusicPromoterStoredProcedureWithParamsAsync (string procedureName, string wrapper = null, string returns = null)
        {
             ApiResponse<StoredProcedureResponse> localVarResponse = await CallMusicPromoterStoredProcedureWithParamsAsyncWithHttpInfo(procedureName, wrapper, returns);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Call a stored procedure. Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="procedureName">Name of the stored procedure to call.</param>
        /// <param name="wrapper">Add this wrapper around the expected data set before returning. (optional)</param>
        /// <param name="returns">If returning a single value, use this to set the type of that value. (optional)</param>
        /// <returns>Task of ApiResponse (StoredProcedureResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredProcedureResponse>> CallMusicPromoterStoredProcedureWithParamsAsyncWithHttpInfo (string procedureName, string wrapper = null, string returns = null)
        {
            // verify the required parameter 'procedureName' is set
            if (procedureName == null)
                throw new ApiException(400, "Missing required parameter 'procedureName' when calling Music_promoterApi->CallMusicPromoterStoredProcedureWithParams");

            var localVarPath = "/_proc/{procedure_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (procedureName != null) localVarPathParams.Add("procedure_name", Configuration.ApiClient.ParameterToString(procedureName)); // path parameter
            if (wrapper != null) localVarQueryParams.Add("wrapper", Configuration.ApiClient.ParameterToString(wrapper)); // query parameter
            if (returns != null) localVarQueryParams.Add("returns", Configuration.ApiClient.ParameterToString(returns)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CallMusicPromoterStoredProcedureWithParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredProcedureResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredProcedureResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredProcedureResponse)));
        }

        /// <summary>
        /// Create table fields. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success CreateMusicPromoterFields (string tableName)
        {
             ApiResponse<Success> localVarResponse = CreateMusicPromoterFieldsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create table fields. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > CreateMusicPromoterFieldsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Create table fields. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> CreateMusicPromoterFieldsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await CreateMusicPromoterFieldsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create table fields. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> CreateMusicPromoterFieldsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Create one or more records. Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>RecordsResponse</returns>
        public RecordsResponse CreateMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = CreateMusicPromoterRecordsWithHttpInfo(tableName, fields, related, idField, idType, _continue, rollback, X_HTTP_METHOD);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create one or more records. Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        public ApiResponse< RecordsResponse > CreateMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (X_HTTP_METHOD != null) localVarHeaderParams.Add("X-HTTP-METHOD", Configuration.ApiClient.ParameterToString(X_HTTP_METHOD)); // header parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Create one or more records. Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        public async System.Threading.Tasks.Task<RecordsResponse> CreateMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = await CreateMusicPromoterRecordsAsyncWithHttpInfo(tableName, fields, related, idField, idType, _continue, rollback, X_HTTP_METHOD);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create one or more records. Posted data should be an array of records wrapped in a **record** element. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="X_HTTP_METHOD">Override request using POST to tunnel other http request, such as DELETE or GET passing a payload. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> CreateMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string X_HTTP_METHOD = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (X_HTTP_METHOD != null) localVarHeaderParams.Add("X-HTTP-METHOD", Configuration.ApiClient.ParameterToString(X_HTTP_METHOD)); // header parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Create table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success CreateMusicPromoterRelationships (string tableName)
        {
             ApiResponse<Success> localVarResponse = CreateMusicPromoterRelationshipsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > CreateMusicPromoterRelationshipsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Create table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> CreateMusicPromoterRelationshipsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await CreateMusicPromoterRelationshipsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> CreateMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Create a table with the given properties and fields. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success CreateMusicPromoterTable (string tableName)
        {
             ApiResponse<Success> localVarResponse = CreateMusicPromoterTableWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a table with the given properties and fields. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > CreateMusicPromoterTableWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Create a table with the given properties and fields. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> CreateMusicPromoterTableAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await CreateMusicPromoterTableAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a table with the given properties and fields. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> CreateMusicPromoterTableAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->CreateMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Create one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TableSchemas</returns>
        public TableSchemas CreateMusicPromoterTables ()
        {
             ApiResponse<TableSchemas> localVarResponse = CreateMusicPromoterTablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TableSchemas</returns>
        public ApiResponse< TableSchemas > CreateMusicPromoterTablesWithHttpInfo ()
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Create one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TableSchemas</returns>
        public async System.Threading.Tasks.Task<TableSchemas> CreateMusicPromoterTablesAsync ()
        {
             ApiResponse<TableSchemas> localVarResponse = await CreateMusicPromoterTablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableSchemas>> CreateMusicPromoterTablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Remove the given field from the given table. Careful, this drops the database table field/column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Success</returns>
        public Success DeleteMusicPromoterField (string tableName, string fieldName)
        {
             ApiResponse<Success> localVarResponse = DeleteMusicPromoterFieldWithHttpInfo(tableName, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the given field from the given table. Careful, this drops the database table field/column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteMusicPromoterFieldWithHttpInfo (string tableName, string fieldName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->DeleteMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Remove the given field from the given table. Careful, this drops the database table field/column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteMusicPromoterFieldAsync (string tableName, string fieldName)
        {
             ApiResponse<Success> localVarResponse = await DeleteMusicPromoterFieldAsyncWithHttpInfo(tableName, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove the given field from the given table. Careful, this drops the database table field/column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->DeleteMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete (aka drop) the given fields. Careful, this drops the table column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success DeleteMusicPromoterFields (string tableName)
        {
             ApiResponse<Success> localVarResponse = DeleteMusicPromoterFieldsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete (aka drop) the given fields. Careful, this drops the table column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteMusicPromoterFieldsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete (aka drop) the given fields. Careful, this drops the table column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteMusicPromoterFieldsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await DeleteMusicPromoterFieldsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete (aka drop) the given fields. Careful, this drops the table column and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterFieldsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete one record by identifier. Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        public RecordResponse DeleteMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = DeleteMusicPromoterRecordWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one record by identifier. Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        public ApiResponse< RecordResponse > DeleteMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->DeleteMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Delete one record by identifier. Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        public async System.Threading.Tasks.Task<RecordResponse> DeleteMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = await DeleteMusicPromoterRecordAsyncWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete one record by identifier. Use the **fields** parameter to return more deleted properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordResponse>> DeleteMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->DeleteMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Delete one or more records. Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>RecordsResponse</returns>
        public RecordsResponse DeleteMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = DeleteMusicPromoterRecordsWithHttpInfo(tableName, fields, related, ids, idField, idType, _continue, rollback, filter, force);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete one or more records. Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        public ApiResponse< RecordsResponse > DeleteMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Delete one or more records. Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        public async System.Threading.Tasks.Task<RecordsResponse> DeleteMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = await DeleteMusicPromoterRecordsAsyncWithHttpInfo(tableName, fields, related, ids, idField, idType, _continue, rollback, filter, force);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete one or more records. Set the **ids** parameter to a list of record identifying (primary key) values to delete specific records. Alternatively, to delete records by a large list of ids, pass the ids in the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **filter** parameter to a SQL WHERE clause to delete specific records, otherwise set **force** to true to clear the table. Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the **body**. By default, only the id property of the record is returned on success, use **fields** to return more info. Set the **body** to an array of records, minimally including the identifying fields, to delete specific records. By default, only the id property of the record is returned on success, use **fields** to return more info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="force">Set to true to delete all resources in the given table, folder, etc. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> DeleteMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null, bool? force = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Remove the given relationship from the given table. Removes the relationship between the tables given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Success</returns>
        public Success DeleteMusicPromoterRelationship (string tableName, string relationshipName)
        {
             ApiResponse<Success> localVarResponse = DeleteMusicPromoterRelationshipWithHttpInfo(tableName, relationshipName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the given relationship from the given table. Removes the relationship between the tables given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->DeleteMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Remove the given relationship from the given table. Removes the relationship between the tables given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteMusicPromoterRelationshipAsync (string tableName, string relationshipName)
        {
             ApiResponse<Success> localVarResponse = await DeleteMusicPromoterRelationshipAsyncWithHttpInfo(tableName, relationshipName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove the given relationship from the given table. Removes the relationship between the tables given.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->DeleteMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete the given table relationships. Removes the relationships between tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success DeleteMusicPromoterRelationships (string tableName)
        {
             ApiResponse<Success> localVarResponse = DeleteMusicPromoterRelationshipsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given table relationships. Removes the relationships between tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteMusicPromoterRelationshipsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete the given table relationships. Removes the relationships between tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteMusicPromoterRelationshipsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await DeleteMusicPromoterRelationshipsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the given table relationships. Removes the relationships between tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete (aka drop) the given table. Careful, this drops the database table and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success DeleteMusicPromoterTable (string tableName)
        {
             ApiResponse<Success> localVarResponse = DeleteMusicPromoterTableWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete (aka drop) the given table. Careful, this drops the database table and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > DeleteMusicPromoterTableWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Delete (aka drop) the given table. Careful, this drops the database table and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> DeleteMusicPromoterTableAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await DeleteMusicPromoterTableAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete (aka drop) the given table. Careful, this drops the database table and all of its contents.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> DeleteMusicPromoterTableAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DeleteMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Retrieve the definition of the given field for the given table. This describes the field and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>FieldSchema</returns>
        public FieldSchema DescribeMusicPromoterField (string tableName, string fieldName, bool? refresh = null)
        {
             ApiResponse<FieldSchema> localVarResponse = DescribeMusicPromoterFieldWithHttpInfo(tableName, fieldName, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the definition of the given field for the given table. This describes the field and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of FieldSchema</returns>
        public ApiResponse< FieldSchema > DescribeMusicPromoterFieldWithHttpInfo (string tableName, string fieldName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->DescribeMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldSchema)));
        }

        /// <summary>
        /// Retrieve the definition of the given field for the given table. This describes the field and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of FieldSchema</returns>
        public async System.Threading.Tasks.Task<FieldSchema> DescribeMusicPromoterFieldAsync (string tableName, string fieldName, bool? refresh = null)
        {
             ApiResponse<FieldSchema> localVarResponse = await DescribeMusicPromoterFieldAsyncWithHttpInfo(tableName, fieldName, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the definition of the given field for the given table. This describes the field and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (FieldSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldSchema>> DescribeMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->DescribeMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldSchema)));
        }

        /// <summary>
        /// Retrieve table field definitions for the given table. This describes the table&#39;s fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>FieldSchemas</returns>
        public FieldSchemas DescribeMusicPromoterFields (string tableName, bool? refresh = null)
        {
             ApiResponse<FieldSchemas> localVarResponse = DescribeMusicPromoterFieldsWithHttpInfo(tableName, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve table field definitions for the given table. This describes the table&#39;s fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of FieldSchemas</returns>
        public ApiResponse< FieldSchemas > DescribeMusicPromoterFieldsWithHttpInfo (string tableName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldSchemas)));
        }

        /// <summary>
        /// Retrieve table field definitions for the given table. This describes the table&#39;s fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of FieldSchemas</returns>
        public async System.Threading.Tasks.Task<FieldSchemas> DescribeMusicPromoterFieldsAsync (string tableName, bool? refresh = null)
        {
             ApiResponse<FieldSchemas> localVarResponse = await DescribeMusicPromoterFieldsAsyncWithHttpInfo(tableName, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve table field definitions for the given table. This describes the table&#39;s fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (FieldSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldSchemas>> DescribeMusicPromoterFieldsAsyncWithHttpInfo (string tableName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldSchemas)));
        }

        /// <summary>
        /// Retrieve the definition of the given relationship for the given table. This describes the relationship and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>RelationshipSchema</returns>
        public RelationshipSchema DescribeMusicPromoterRelationship (string tableName, string relationshipName, bool? refresh = null)
        {
             ApiResponse<RelationshipSchema> localVarResponse = DescribeMusicPromoterRelationshipWithHttpInfo(tableName, relationshipName, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the definition of the given relationship for the given table. This describes the relationship and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of RelationshipSchema</returns>
        public ApiResponse< RelationshipSchema > DescribeMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->DescribeMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelationshipSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelationshipSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelationshipSchema)));
        }

        /// <summary>
        /// Retrieve the definition of the given relationship for the given table. This describes the relationship and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of RelationshipSchema</returns>
        public async System.Threading.Tasks.Task<RelationshipSchema> DescribeMusicPromoterRelationshipAsync (string tableName, string relationshipName, bool? refresh = null)
        {
             ApiResponse<RelationshipSchema> localVarResponse = await DescribeMusicPromoterRelationshipAsyncWithHttpInfo(tableName, relationshipName, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the definition of the given relationship for the given table. This describes the relationship and its properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (RelationshipSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelationshipSchema>> DescribeMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->DescribeMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelationshipSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelationshipSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelationshipSchema)));
        }

        /// <summary>
        /// Retrieve relationships definition for the given table. This describes the table relationships to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>RelationshipSchemas</returns>
        public RelationshipSchemas DescribeMusicPromoterRelationships (string tableName, bool? refresh = null)
        {
             ApiResponse<RelationshipSchemas> localVarResponse = DescribeMusicPromoterRelationshipsWithHttpInfo(tableName, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve relationships definition for the given table. This describes the table relationships to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of RelationshipSchemas</returns>
        public ApiResponse< RelationshipSchemas > DescribeMusicPromoterRelationshipsWithHttpInfo (string tableName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelationshipSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelationshipSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelationshipSchemas)));
        }

        /// <summary>
        /// Retrieve relationships definition for the given table. This describes the table relationships to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of RelationshipSchemas</returns>
        public async System.Threading.Tasks.Task<RelationshipSchemas> DescribeMusicPromoterRelationshipsAsync (string tableName, bool? refresh = null)
        {
             ApiResponse<RelationshipSchemas> localVarResponse = await DescribeMusicPromoterRelationshipsAsyncWithHttpInfo(tableName, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve relationships definition for the given table. This describes the table relationships to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (RelationshipSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelationshipSchemas>> DescribeMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelationshipSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelationshipSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelationshipSchemas)));
        }

        /// <summary>
        /// Retrieve table definition for the given table. This describes the table, its fields and relations to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>TableSchema</returns>
        public TableSchema DescribeMusicPromoterTable (string tableName, bool? refresh = null)
        {
             ApiResponse<TableSchema> localVarResponse = DescribeMusicPromoterTableWithHttpInfo(tableName, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve table definition for the given table. This describes the table, its fields and relations to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of TableSchema</returns>
        public ApiResponse< TableSchema > DescribeMusicPromoterTableWithHttpInfo (string tableName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchema)));
        }

        /// <summary>
        /// Retrieve table definition for the given table. This describes the table, its fields and relations to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of TableSchema</returns>
        public async System.Threading.Tasks.Task<TableSchema> DescribeMusicPromoterTableAsync (string tableName, bool? refresh = null)
        {
             ApiResponse<TableSchema> localVarResponse = await DescribeMusicPromoterTableAsyncWithHttpInfo(tableName, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve table definition for the given table. This describes the table, its fields and relations to other tables.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (TableSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableSchema>> DescribeMusicPromoterTableAsyncWithHttpInfo (string tableName, bool? refresh = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->DescribeMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DescribeMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchema) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchema)));
        }

        /// <summary>
        /// Retrieve one record by identifier. Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        public RecordResponse GetMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = GetMusicPromoterRecordWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve one record by identifier. Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        public ApiResponse< RecordResponse > GetMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->GetMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->GetMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Retrieve one record by identifier. Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        public async System.Threading.Tasks.Task<RecordResponse> GetMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = await GetMusicPromoterRecordAsyncWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve one record by identifier. Use the **fields** parameter to limit properties that are returned. By default, all fields are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordResponse>> GetMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->GetMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->GetMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Retrieve one or more records. Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>RecordsResponse</returns>
        public RecordsResponse GetMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = GetMusicPromoterRecordsWithHttpInfo(tableName, fields, related, filter, limit, offset, order, group, countOnly, includeCount, includeSchema, ids, idField, idType, _continue, rollback, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve one or more records. Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        public ApiResponse< RecordsResponse > GetMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->GetMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (group != null) localVarQueryParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // query parameter
            if (countOnly != null) localVarQueryParams.Add("count_only", Configuration.ApiClient.ParameterToString(countOnly)); // query parameter
            if (includeCount != null) localVarQueryParams.Add("include_count", Configuration.ApiClient.ParameterToString(includeCount)); // query parameter
            if (includeSchema != null) localVarQueryParams.Add("include_schema", Configuration.ApiClient.ParameterToString(includeSchema)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (file != null) localVarQueryParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Retrieve one or more records. Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        public async System.Threading.Tasks.Task<RecordsResponse> GetMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = await GetMusicPromoterRecordsAsyncWithHttpInfo(tableName, fields, related, filter, limit, offset, order, group, countOnly, includeCount, includeSchema, ids, idField, idType, _continue, rollback, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve one or more records. Set the **filter** parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit. Set the **limit** parameter with or without a filter to return a specific amount of records. Use the **offset** parameter along with the **limit** parameter to page through sets of records. Set the **order** parameter to SQL ORDER_BY clause containing field and optional direction (field_name [ASC|DESC]) to order the returned records. Alternatively, to send the **filter** with or without **params** as posted data, use the getRecordsByPost() POST request and post a filter with or without params.Pass the identifying field values as a comma-separated list in the **ids** parameter. Use the **id_field** and **id_type** parameters to override or specify detail for identifying fields where applicable. Alternatively, to send the **ids** as posted data, use the getRecordsByPost() POST request. Use the **fields** parameter to limit properties returned for each record. By default, all fields are returned for all records. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <param name="limit">Set to limit the filter results. (optional)</param>
        /// <param name="offset">Set to offset the filter results to a particular record count. (optional)</param>
        /// <param name="order">SQL-like order containing field and direction for filter results. (optional)</param>
        /// <param name="group">Comma-delimited list of the fields used for grouping of filter results. (optional)</param>
        /// <param name="countOnly">Return only the total number of filter results. (optional)</param>
        /// <param name="includeCount">Include the total number of filter results in returned metadata. (optional)</param>
        /// <param name="includeSchema">Include the schema of the table queried in returned metadata. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="file">Download the results of the request as a file. **This is here for documentation purpose only. File will not download using API Docs.** (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> GetMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, string filter = null, int? limit = null, int? offset = null, string order = null, string group = null, bool? countOnly = null, bool? includeCount = null, bool? includeSchema = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string file = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->GetMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (group != null) localVarQueryParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // query parameter
            if (countOnly != null) localVarQueryParams.Add("count_only", Configuration.ApiClient.ParameterToString(countOnly)); // query parameter
            if (includeCount != null) localVarQueryParams.Add("include_count", Configuration.ApiClient.ParameterToString(includeCount)); // query parameter
            if (includeSchema != null) localVarQueryParams.Add("include_schema", Configuration.ApiClient.ParameterToString(includeSchema)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (file != null) localVarQueryParams.Add("file", Configuration.ApiClient.ParameterToString(file)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Get resources for this service. Return an array of the resources available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>MySqlDbs</returns>
        public MySqlDbs GetMusicPromoterResources (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null)
        {
             ApiResponse<MySqlDbs> localVarResponse = GetMusicPromoterResourcesWithHttpInfo(asList, asAccessList, includeAccess, fields, idField, idType, refresh);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get resources for this service. Return an array of the resources available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>ApiResponse of MySqlDbs</returns>
        public ApiResponse< MySqlDbs > GetMusicPromoterResourcesWithHttpInfo (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null)
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asList != null) localVarQueryParams.Add("as_list", Configuration.ApiClient.ParameterToString(asList)); // query parameter
            if (asAccessList != null) localVarQueryParams.Add("as_access_list", Configuration.ApiClient.ParameterToString(asAccessList)); // query parameter
            if (includeAccess != null) localVarQueryParams.Add("include_access", Configuration.ApiClient.ParameterToString(includeAccess)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MySqlDbs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MySqlDbs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MySqlDbs)));
        }

        /// <summary>
        /// Get resources for this service. Return an array of the resources available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of MySqlDbs</returns>
        public async System.Threading.Tasks.Task<MySqlDbs> GetMusicPromoterResourcesAsync (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null)
        {
             ApiResponse<MySqlDbs> localVarResponse = await GetMusicPromoterResourcesAsyncWithHttpInfo(asList, asAccessList, includeAccess, fields, idField, idType, refresh);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get resources for this service. Return an array of the resources available.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asList">Return only a list of the resource identifiers. (optional)</param>
        /// <param name="asAccessList">Returns a list of the resources for role access designation. (optional)</param>
        /// <param name="includeAccess">Include the access permissions for the returned resource. (optional)</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="refresh">Refresh any cached resource list on the server. (optional)</param>
        /// <returns>Task of ApiResponse (MySqlDbs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MySqlDbs>> GetMusicPromoterResourcesAsyncWithHttpInfo (bool? asList = null, bool? asAccessList = null, bool? includeAccess = null, List<string> fields = null, List<string> idField = null, List<string> idType = null, bool? refresh = null)
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asList != null) localVarQueryParams.Add("as_list", Configuration.ApiClient.ParameterToString(asList)); // query parameter
            if (asAccessList != null) localVarQueryParams.Add("as_access_list", Configuration.ApiClient.ParameterToString(asAccessList)); // query parameter
            if (includeAccess != null) localVarQueryParams.Add("include_access", Configuration.ApiClient.ParameterToString(includeAccess)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (refresh != null) localVarQueryParams.Add("refresh", Configuration.ApiClient.ParameterToString(refresh)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MySqlDbs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MySqlDbs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MySqlDbs)));
        }

        /// <summary>
        /// Retrieve one or more Schemas. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>TableSchemas</returns>
        public TableSchemas GetMusicPromoterSchemas (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<TableSchemas> localVarResponse = GetMusicPromoterSchemasWithHttpInfo(fields, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve one or more Schemas. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of TableSchemas</returns>
        public ApiResponse< TableSchemas > GetMusicPromoterSchemasWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterSchemas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Retrieve one or more Schemas. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of TableSchemas</returns>
        public async System.Threading.Tasks.Task<TableSchemas> GetMusicPromoterSchemasAsync (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<TableSchemas> localVarResponse = await GetMusicPromoterSchemasAsyncWithHttpInfo(fields, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve one or more Schemas. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableSchemas>> GetMusicPromoterSchemasAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterSchemas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Retrieve one or more StoredFunctions. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>StoredRoutineSchemas</returns>
        public StoredRoutineSchemas GetMusicPromoterStoredFunctions (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<StoredRoutineSchemas> localVarResponse = GetMusicPromoterStoredFunctionsWithHttpInfo(fields, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve one or more StoredFunctions. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of StoredRoutineSchemas</returns>
        public ApiResponse< StoredRoutineSchemas > GetMusicPromoterStoredFunctionsWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_func";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterStoredFunctions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredRoutineSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredRoutineSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredRoutineSchemas)));
        }

        /// <summary>
        /// Retrieve one or more StoredFunctions. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of StoredRoutineSchemas</returns>
        public async System.Threading.Tasks.Task<StoredRoutineSchemas> GetMusicPromoterStoredFunctionsAsync (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<StoredRoutineSchemas> localVarResponse = await GetMusicPromoterStoredFunctionsAsyncWithHttpInfo(fields, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve one or more StoredFunctions. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (StoredRoutineSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredRoutineSchemas>> GetMusicPromoterStoredFunctionsAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_func";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterStoredFunctions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredRoutineSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredRoutineSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredRoutineSchemas)));
        }

        /// <summary>
        /// Retrieve one or more StoredProcedures. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>StoredRoutineSchemas</returns>
        public StoredRoutineSchemas GetMusicPromoterStoredProcedures (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<StoredRoutineSchemas> localVarResponse = GetMusicPromoterStoredProceduresWithHttpInfo(fields, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve one or more StoredProcedures. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of StoredRoutineSchemas</returns>
        public ApiResponse< StoredRoutineSchemas > GetMusicPromoterStoredProceduresWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_proc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterStoredProcedures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredRoutineSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredRoutineSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredRoutineSchemas)));
        }

        /// <summary>
        /// Retrieve one or more StoredProcedures. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of StoredRoutineSchemas</returns>
        public async System.Threading.Tasks.Task<StoredRoutineSchemas> GetMusicPromoterStoredProceduresAsync (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<StoredRoutineSchemas> localVarResponse = await GetMusicPromoterStoredProceduresAsyncWithHttpInfo(fields, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve one or more StoredProcedures. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (StoredRoutineSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoredRoutineSchemas>> GetMusicPromoterStoredProceduresAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_proc";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterStoredProcedures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoredRoutineSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoredRoutineSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoredRoutineSchemas)));
        }

        /// <summary>
        /// Retrieve one or more Tables. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>TableSchemas</returns>
        public TableSchemas GetMusicPromoterTables (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<TableSchemas> localVarResponse = GetMusicPromoterTablesWithHttpInfo(fields, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve one or more Tables. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of TableSchemas</returns>
        public ApiResponse< TableSchemas > GetMusicPromoterTablesWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_table";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Retrieve one or more Tables. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of TableSchemas</returns>
        public async System.Threading.Tasks.Task<TableSchemas> GetMusicPromoterTablesAsync (List<string> fields = null, List<int?> ids = null)
        {
             ApiResponse<TableSchemas> localVarResponse = await GetMusicPromoterTablesAsyncWithHttpInfo(fields, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve one or more Tables. Use the &#39;ids&#39; parameter to limit records that are returned. By default, all records up to the maximum are returned. Use the &#39;fields&#39; parameters to limit properties returned for each record. By default, all fields are returned for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableSchemas>> GetMusicPromoterTablesAsyncWithHttpInfo (List<string> fields = null, List<int?> ids = null)
        {

            var localVarPath = "/_table";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Success</returns>
        public Success ReplaceMusicPromoterField (string tableName, string fieldName)
        {
             ApiResponse<Success> localVarResponse = ReplaceMusicPromoterFieldWithHttpInfo(tableName, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > ReplaceMusicPromoterFieldWithHttpInfo (string tableName, string fieldName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->ReplaceMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ReplaceMusicPromoterFieldAsync (string tableName, string fieldName)
        {
             ApiResponse<Success> localVarResponse = await ReplaceMusicPromoterFieldAsyncWithHttpInfo(tableName, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->ReplaceMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (replace) table fields with the given properties. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success ReplaceMusicPromoterFields (string tableName)
        {
             ApiResponse<Success> localVarResponse = ReplaceMusicPromoterFieldsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (replace) table fields with the given properties. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > ReplaceMusicPromoterFieldsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (replace) table fields with the given properties. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ReplaceMusicPromoterFieldsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await ReplaceMusicPromoterFieldsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (replace) table fields with the given properties. Post data should be an array of fields and their properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterFieldsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Replace the content of one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        public RecordResponse ReplaceMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = ReplaceMusicPromoterRecordWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace the content of one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        public ApiResponse< RecordResponse > ReplaceMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->ReplaceMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Replace the content of one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        public async System.Threading.Tasks.Task<RecordResponse> ReplaceMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = await ReplaceMusicPromoterRecordAsyncWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace the content of one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordResponse>> ReplaceMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->ReplaceMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Update (replace) one or more records. Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>RecordsResponse</returns>
        public RecordsResponse ReplaceMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = ReplaceMusicPromoterRecordsWithHttpInfo(tableName, fields, related, ids, idField, idType, _continue, rollback, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (replace) one or more records. Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        public ApiResponse< RecordsResponse > ReplaceMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Update (replace) one or more records. Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        public async System.Threading.Tasks.Task<RecordsResponse> ReplaceMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = await ReplaceMusicPromoterRecordsAsyncWithHttpInfo(tableName, fields, related, ids, idField, idType, _continue, rollback, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (replace) one or more records. Post data should be an array of records wrapped in a **resource** tag. If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a **resource** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> ReplaceMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Success</returns>
        public Success ReplaceMusicPromoterRelationship (string tableName, string relationshipName)
        {
             ApiResponse<Success> localVarResponse = ReplaceMusicPromoterRelationshipWithHttpInfo(tableName, relationshipName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > ReplaceMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->ReplaceMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ReplaceMusicPromoterRelationshipAsync (string tableName, string relationshipName)
        {
             ApiResponse<Success> localVarResponse = await ReplaceMusicPromoterRelationshipAsyncWithHttpInfo(tableName, relationshipName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->ReplaceMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (replace) table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success ReplaceMusicPromoterRelationships (string tableName)
        {
             ApiResponse<Success> localVarResponse = ReplaceMusicPromoterRelationshipsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (replace) table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > ReplaceMusicPromoterRelationshipsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (replace) table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ReplaceMusicPromoterRelationshipsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await ReplaceMusicPromoterRelationshipsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (replace) table relationships with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (replace) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success ReplaceMusicPromoterTable (string tableName)
        {
             ApiResponse<Success> localVarResponse = ReplaceMusicPromoterTableWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (replace) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > ReplaceMusicPromoterTableWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (replace) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> ReplaceMusicPromoterTableAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await ReplaceMusicPromoterTableAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (replace) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> ReplaceMusicPromoterTableAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->ReplaceMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (replace) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TableSchemas</returns>
        public TableSchemas ReplaceMusicPromoterTables ()
        {
             ApiResponse<TableSchemas> localVarResponse = ReplaceMusicPromoterTablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (replace) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TableSchemas</returns>
        public ApiResponse< TableSchemas > ReplaceMusicPromoterTablesWithHttpInfo ()
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Update (replace) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TableSchemas</returns>
        public async System.Threading.Tasks.Task<TableSchemas> ReplaceMusicPromoterTablesAsync ()
        {
             ApiResponse<TableSchemas> localVarResponse = await ReplaceMusicPromoterTablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (replace) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableSchemas>> ReplaceMusicPromoterTablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Success</returns>
        public Success UpdateMusicPromoterField (string tableName, string fieldName)
        {
             ApiResponse<Success> localVarResponse = UpdateMusicPromoterFieldWithHttpInfo(tableName, fieldName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateMusicPromoterFieldWithHttpInfo (string tableName, string fieldName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->UpdateMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateMusicPromoterFieldAsync (string tableName, string fieldName)
        {
             ApiResponse<Success> localVarResponse = await UpdateMusicPromoterFieldAsyncWithHttpInfo(tableName, fieldName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one field by identifier. Post data should be an array of field properties for the given field.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fieldName">Name of the field to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterFieldAsyncWithHttpInfo (string tableName, string fieldName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterField");
            // verify the required parameter 'fieldName' is set
            if (fieldName == null)
                throw new ApiException(400, "Missing required parameter 'fieldName' when calling Music_promoterApi->UpdateMusicPromoterField");

            var localVarPath = "/_schema/{table_name}/_field/{field_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fieldName != null) localVarPathParams.Add("field_name", Configuration.ApiClient.ParameterToString(fieldName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) table fields with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success UpdateMusicPromoterFields (string tableName)
        {
             ApiResponse<Success> localVarResponse = UpdateMusicPromoterFieldsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (patch) table fields with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateMusicPromoterFieldsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) table fields with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateMusicPromoterFieldsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await UpdateMusicPromoterFieldsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (patch) table fields with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterFieldsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterFields");

            var localVarPath = "/_schema/{table_name}/_field";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>RecordResponse</returns>
        public RecordResponse UpdateMusicPromoterRecord (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = UpdateMusicPromoterRecordWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (patch) one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>ApiResponse of RecordResponse</returns>
        public ApiResponse< RecordResponse > UpdateMusicPromoterRecordWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->UpdateMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Update (patch) one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of RecordResponse</returns>
        public async System.Threading.Tasks.Task<RecordResponse> UpdateMusicPromoterRecordAsync (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
             ApiResponse<RecordResponse> localVarResponse = await UpdateMusicPromoterRecordAsyncWithHttpInfo(id, tableName, fields, related, idField, idType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (patch) one record by identifier. Post data should be an array of fields for a single record. Use the **fields** parameter to return more properties. By default, the id is returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the record to retrieve.</param>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <returns>Task of ApiResponse (RecordResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordResponse>> UpdateMusicPromoterRecordAsyncWithHttpInfo (string id, string tableName, List<string> fields = null, List<string> related = null, List<string> idField = null, List<string> idType = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Music_promoterApi->UpdateMusicPromoterRecord");
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRecord");

            var localVarPath = "/_table/{table_name}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordResponse)));
        }

        /// <summary>
        /// Update (patch) one or more records. Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>RecordsResponse</returns>
        public RecordsResponse UpdateMusicPromoterRecords (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = UpdateMusicPromoterRecordsWithHttpInfo(tableName, fields, related, ids, idField, idType, _continue, rollback, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (patch) one or more records. Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>ApiResponse of RecordsResponse</returns>
        public ApiResponse< RecordsResponse > UpdateMusicPromoterRecordsWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Update (patch) one or more records. Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of RecordsResponse</returns>
        public async System.Threading.Tasks.Task<RecordsResponse> UpdateMusicPromoterRecordsAsync (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
             ApiResponse<RecordsResponse> localVarResponse = await UpdateMusicPromoterRecordsAsyncWithHttpInfo(tableName, fields, related, ids, idField, idType, _continue, rollback, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (patch) one or more records. Post data should be an array of records containing at least the identifying fields for each record. Posted body should be a single record with name-value pairs to update wrapped in a **record** tag. Ids can be included via URL parameter or included in the posted body. Filter can be included via URL parameter or included in the posted body. By default, only the id property of the record is returned on success. Use **fields** parameter to return more info.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="fields">Comma-delimited list of properties to be returned for each resource, \&quot;*\&quot; returns all properties. If as_list, use this to override the default identifier. (optional)</param>
        /// <param name="related">Comma-delimited list of related names to retrieve for each resource. (optional)</param>
        /// <param name="ids">Comma-delimited list of the identifiers of the records to retrieve. (optional)</param>
        /// <param name="idField">Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="idType">Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned. (optional)</param>
        /// <param name="_continue">In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="rollback">In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure. (optional)</param>
        /// <param name="filter">SQL-like filter to limit the records to retrieve. (optional)</param>
        /// <returns>Task of ApiResponse (RecordsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecordsResponse>> UpdateMusicPromoterRecordsAsyncWithHttpInfo (string tableName, List<string> fields = null, List<string> related = null, List<int?> ids = null, List<string> idField = null, List<string> idType = null, bool? _continue = null, bool? rollback = null, string filter = null)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRecords");

            var localVarPath = "/_table/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (related != null) localVarQueryParams.Add("related", Configuration.ApiClient.ParameterToString(related)); // query parameter
            if (ids != null) localVarQueryParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // query parameter
            if (idField != null) localVarQueryParams.Add("id_field", Configuration.ApiClient.ParameterToString(idField)); // query parameter
            if (idType != null) localVarQueryParams.Add("id_type", Configuration.ApiClient.ParameterToString(idType)); // query parameter
            if (_continue != null) localVarQueryParams.Add("continue", Configuration.ApiClient.ParameterToString(_continue)); // query parameter
            if (rollback != null) localVarQueryParams.Add("rollback", Configuration.ApiClient.ParameterToString(rollback)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecordsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecordsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecordsResponse)));
        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Success</returns>
        public Success UpdateMusicPromoterRelationship (string tableName, string relationshipName)
        {
             ApiResponse<Success> localVarResponse = UpdateMusicPromoterRelationshipWithHttpInfo(tableName, relationshipName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateMusicPromoterRelationshipWithHttpInfo (string tableName, string relationshipName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->UpdateMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateMusicPromoterRelationshipAsync (string tableName, string relationshipName)
        {
             ApiResponse<Success> localVarResponse = await UpdateMusicPromoterRelationshipAsyncWithHttpInfo(tableName, relationshipName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one relationship by identifier. Post data should be an array of properties for the given relationship.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <param name="relationshipName">Name of the relationship to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterRelationshipAsyncWithHttpInfo (string tableName, string relationshipName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRelationship");
            // verify the required parameter 'relationshipName' is set
            if (relationshipName == null)
                throw new ApiException(400, "Missing required parameter 'relationshipName' when calling Music_promoterApi->UpdateMusicPromoterRelationship");

            var localVarPath = "/_schema/{table_name}/_related/{relationship_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter
            if (relationshipName != null) localVarPathParams.Add("relationship_name", Configuration.ApiClient.ParameterToString(relationshipName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success UpdateMusicPromoterRelationships (string tableName)
        {
             ApiResponse<Success> localVarResponse = UpdateMusicPromoterRelationshipsWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateMusicPromoterRelationshipsWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateMusicPromoterRelationshipsAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await UpdateMusicPromoterRelationshipsAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of relationship properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterRelationshipsAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterRelationships");

            var localVarPath = "/_schema/{table_name}/_related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterRelationships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Success</returns>
        public Success UpdateMusicPromoterTable (string tableName)
        {
             ApiResponse<Success> localVarResponse = UpdateMusicPromoterTableWithHttpInfo(tableName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>ApiResponse of Success</returns>
        public ApiResponse< Success > UpdateMusicPromoterTableWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of Success</returns>
        public async System.Threading.Tasks.Task<Success> UpdateMusicPromoterTableAsync (string tableName)
        {
             ApiResponse<Success> localVarResponse = await UpdateMusicPromoterTableAsyncWithHttpInfo(tableName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (patch) a table with the given properties. Post data should be an array of field properties.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tableName">Name of the table to perform operations on.</param>
        /// <returns>Task of ApiResponse (Success)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Success>> UpdateMusicPromoterTableAsyncWithHttpInfo (string tableName)
        {
            // verify the required parameter 'tableName' is set
            if (tableName == null)
                throw new ApiException(400, "Missing required parameter 'tableName' when calling Music_promoterApi->UpdateMusicPromoterTable");

            var localVarPath = "/_schema/{table_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tableName != null) localVarPathParams.Add("table_name", Configuration.ApiClient.ParameterToString(tableName)); // path parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Success>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Success) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Success)));
        }

        /// <summary>
        /// Update (patch) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TableSchemas</returns>
        public TableSchemas UpdateMusicPromoterTables ()
        {
             ApiResponse<TableSchemas> localVarResponse = UpdateMusicPromoterTablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (patch) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TableSchemas</returns>
        public ApiResponse< TableSchemas > UpdateMusicPromoterTablesWithHttpInfo ()
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }

            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }

            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

        /// <summary>
        /// Update (patch) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TableSchemas</returns>
        public async System.Threading.Tasks.Task<TableSchemas> UpdateMusicPromoterTablesAsync ()
        {
             ApiResponse<TableSchemas> localVarResponse = await UpdateMusicPromoterTablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (patch) one or more tables. Post data should be a single table definition or an array of table definitions.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TableSchemas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TableSchemas>> UpdateMusicPromoterTablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/_schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key")))
            {
                localVarHeaderParams["X-DreamFactory-API-Key"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-API-Key");
            }
            // authentication (ApiKeyUserSecret) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("user-secret-api-key")))
            {
                localVarHeaderParams["user-secret-api-key"] = Configuration.GetApiKeyWithPrefix("user-secret-api-key");
            }
            // authentication (SessionTokenHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token")))
            {
                localVarHeaderParams["X-DreamFactory-Session-Token"] = Configuration.GetApiKeyWithPrefix("X-DreamFactory-Session-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMusicPromoterTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TableSchemas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TableSchemas) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TableSchemas)));
        }

    }
}
