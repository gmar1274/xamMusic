/* 
 * Automated Music Promoter
 *
 * acba automated music promoter
 *
 * OpenAPI spec version: 2.0
 * Contact: support@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing Music_promoterApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Music_promoterApiTests
    {
        private Music_promoterApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Music_promoterApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Music_promoterApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Music_promoterApi
            //Assert.IsInstanceOfType(typeof(Music_promoterApi), instance, "instance is a Music_promoterApi");
        }

        
        /// <summary>
        /// Test CallMusicPromoterStoredFunction
        /// </summary>
        [Test]
        public void CallMusicPromoterStoredFunctionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string functionName = null;
            //string returns = null;
            //var response = instance.CallMusicPromoterStoredFunction(functionName, returns);
            //Assert.IsInstanceOf<StoredFunctionResponse> (response, "response is StoredFunctionResponse");
        }
        
        /// <summary>
        /// Test CallMusicPromoterStoredFunctionWithParams
        /// </summary>
        [Test]
        public void CallMusicPromoterStoredFunctionWithParamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string functionName = null;
            //string returns = null;
            //var response = instance.CallMusicPromoterStoredFunctionWithParams(functionName, returns);
            //Assert.IsInstanceOf<StoredFunctionResponse> (response, "response is StoredFunctionResponse");
        }
        
        /// <summary>
        /// Test CallMusicPromoterStoredProcedure
        /// </summary>
        [Test]
        public void CallMusicPromoterStoredProcedureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string procedureName = null;
            //string wrapper = null;
            //string returns = null;
            //var response = instance.CallMusicPromoterStoredProcedure(procedureName, wrapper, returns);
            //Assert.IsInstanceOf<StoredProcedureResponse> (response, "response is StoredProcedureResponse");
        }
        
        /// <summary>
        /// Test CallMusicPromoterStoredProcedureWithParams
        /// </summary>
        [Test]
        public void CallMusicPromoterStoredProcedureWithParamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string procedureName = null;
            //string wrapper = null;
            //string returns = null;
            //var response = instance.CallMusicPromoterStoredProcedureWithParams(procedureName, wrapper, returns);
            //Assert.IsInstanceOf<StoredProcedureResponse> (response, "response is StoredProcedureResponse");
        }
        
        /// <summary>
        /// Test CreateMusicPromoterFields
        /// </summary>
        [Test]
        public void CreateMusicPromoterFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.CreateMusicPromoterFields(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test CreateMusicPromoterRecords
        /// </summary>
        [Test]
        public void CreateMusicPromoterRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //bool? _continue = null;
            //bool? rollback = null;
            //string X_HTTP_METHOD = null;
            //var response = instance.CreateMusicPromoterRecords(tableName, fields, related, idField, idType, _continue, rollback, X_HTTP_METHOD);
            //Assert.IsInstanceOf<RecordsResponse> (response, "response is RecordsResponse");
        }
        
        /// <summary>
        /// Test CreateMusicPromoterRelationships
        /// </summary>
        [Test]
        public void CreateMusicPromoterRelationshipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.CreateMusicPromoterRelationships(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test CreateMusicPromoterTable
        /// </summary>
        [Test]
        public void CreateMusicPromoterTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.CreateMusicPromoterTable(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test CreateMusicPromoterTables
        /// </summary>
        [Test]
        public void CreateMusicPromoterTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CreateMusicPromoterTables();
            //Assert.IsInstanceOf<TableSchemas> (response, "response is TableSchemas");
        }
        
        /// <summary>
        /// Test DeleteMusicPromoterField
        /// </summary>
        [Test]
        public void DeleteMusicPromoterFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string fieldName = null;
            //var response = instance.DeleteMusicPromoterField(tableName, fieldName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test DeleteMusicPromoterFields
        /// </summary>
        [Test]
        public void DeleteMusicPromoterFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.DeleteMusicPromoterFields(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test DeleteMusicPromoterRecord
        /// </summary>
        [Test]
        public void DeleteMusicPromoterRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //var response = instance.DeleteMusicPromoterRecord(id, tableName, fields, related, idField, idType);
            //Assert.IsInstanceOf<RecordResponse> (response, "response is RecordResponse");
        }
        
        /// <summary>
        /// Test DeleteMusicPromoterRecords
        /// </summary>
        [Test]
        public void DeleteMusicPromoterRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<int?> ids = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //bool? _continue = null;
            //bool? rollback = null;
            //string filter = null;
            //bool? force = null;
            //var response = instance.DeleteMusicPromoterRecords(tableName, fields, related, ids, idField, idType, _continue, rollback, filter, force);
            //Assert.IsInstanceOf<RecordsResponse> (response, "response is RecordsResponse");
        }
        
        /// <summary>
        /// Test DeleteMusicPromoterRelationship
        /// </summary>
        [Test]
        public void DeleteMusicPromoterRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string relationshipName = null;
            //var response = instance.DeleteMusicPromoterRelationship(tableName, relationshipName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test DeleteMusicPromoterRelationships
        /// </summary>
        [Test]
        public void DeleteMusicPromoterRelationshipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.DeleteMusicPromoterRelationships(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test DeleteMusicPromoterTable
        /// </summary>
        [Test]
        public void DeleteMusicPromoterTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.DeleteMusicPromoterTable(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test DescribeMusicPromoterField
        /// </summary>
        [Test]
        public void DescribeMusicPromoterFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string fieldName = null;
            //bool? refresh = null;
            //var response = instance.DescribeMusicPromoterField(tableName, fieldName, refresh);
            //Assert.IsInstanceOf<FieldSchema> (response, "response is FieldSchema");
        }
        
        /// <summary>
        /// Test DescribeMusicPromoterFields
        /// </summary>
        [Test]
        public void DescribeMusicPromoterFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //bool? refresh = null;
            //var response = instance.DescribeMusicPromoterFields(tableName, refresh);
            //Assert.IsInstanceOf<FieldSchemas> (response, "response is FieldSchemas");
        }
        
        /// <summary>
        /// Test DescribeMusicPromoterRelationship
        /// </summary>
        [Test]
        public void DescribeMusicPromoterRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string relationshipName = null;
            //bool? refresh = null;
            //var response = instance.DescribeMusicPromoterRelationship(tableName, relationshipName, refresh);
            //Assert.IsInstanceOf<RelationshipSchema> (response, "response is RelationshipSchema");
        }
        
        /// <summary>
        /// Test DescribeMusicPromoterRelationships
        /// </summary>
        [Test]
        public void DescribeMusicPromoterRelationshipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //bool? refresh = null;
            //var response = instance.DescribeMusicPromoterRelationships(tableName, refresh);
            //Assert.IsInstanceOf<RelationshipSchemas> (response, "response is RelationshipSchemas");
        }
        
        /// <summary>
        /// Test DescribeMusicPromoterTable
        /// </summary>
        [Test]
        public void DescribeMusicPromoterTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //bool? refresh = null;
            //var response = instance.DescribeMusicPromoterTable(tableName, refresh);
            //Assert.IsInstanceOf<TableSchema> (response, "response is TableSchema");
        }
        
        /// <summary>
        /// Test GetMusicPromoterRecord
        /// </summary>
        [Test]
        public void GetMusicPromoterRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //var response = instance.GetMusicPromoterRecord(id, tableName, fields, related, idField, idType);
            //Assert.IsInstanceOf<RecordResponse> (response, "response is RecordResponse");
        }
        
        /// <summary>
        /// Test GetMusicPromoterRecords
        /// </summary>
        [Test]
        public void GetMusicPromoterRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //string filter = null;
            //int? limit = null;
            //int? offset = null;
            //string order = null;
            //string group = null;
            //bool? countOnly = null;
            //bool? includeCount = null;
            //bool? includeSchema = null;
            //List<int?> ids = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //bool? _continue = null;
            //bool? rollback = null;
            //string file = null;
            //var response = instance.GetMusicPromoterRecords(tableName, fields, related, filter, limit, offset, order, group, countOnly, includeCount, includeSchema, ids, idField, idType, _continue, rollback, file);
            //Assert.IsInstanceOf<RecordsResponse> (response, "response is RecordsResponse");
        }
        
        /// <summary>
        /// Test GetMusicPromoterResources
        /// </summary>
        [Test]
        public void GetMusicPromoterResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? asList = null;
            //bool? asAccessList = null;
            //bool? includeAccess = null;
            //List<string> fields = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //bool? refresh = null;
            //var response = instance.GetMusicPromoterResources(asList, asAccessList, includeAccess, fields, idField, idType, refresh);
            //Assert.IsInstanceOf<MySqlDbs> (response, "response is MySqlDbs");
        }
        
        /// <summary>
        /// Test GetMusicPromoterSchemas
        /// </summary>
        [Test]
        public void GetMusicPromoterSchemasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> fields = null;
            //List<int?> ids = null;
            //var response = instance.GetMusicPromoterSchemas(fields, ids);
            //Assert.IsInstanceOf<TableSchemas> (response, "response is TableSchemas");
        }
        
        /// <summary>
        /// Test GetMusicPromoterStoredFunctions
        /// </summary>
        [Test]
        public void GetMusicPromoterStoredFunctionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> fields = null;
            //List<int?> ids = null;
            //var response = instance.GetMusicPromoterStoredFunctions(fields, ids);
            //Assert.IsInstanceOf<StoredRoutineSchemas> (response, "response is StoredRoutineSchemas");
        }
        
        /// <summary>
        /// Test GetMusicPromoterStoredProcedures
        /// </summary>
        [Test]
        public void GetMusicPromoterStoredProceduresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> fields = null;
            //List<int?> ids = null;
            //var response = instance.GetMusicPromoterStoredProcedures(fields, ids);
            //Assert.IsInstanceOf<StoredRoutineSchemas> (response, "response is StoredRoutineSchemas");
        }
        
        /// <summary>
        /// Test GetMusicPromoterTables
        /// </summary>
        [Test]
        public void GetMusicPromoterTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> fields = null;
            //List<int?> ids = null;
            //var response = instance.GetMusicPromoterTables(fields, ids);
            //Assert.IsInstanceOf<TableSchemas> (response, "response is TableSchemas");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterField
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string fieldName = null;
            //var response = instance.ReplaceMusicPromoterField(tableName, fieldName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterFields
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.ReplaceMusicPromoterFields(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterRecord
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //var response = instance.ReplaceMusicPromoterRecord(id, tableName, fields, related, idField, idType);
            //Assert.IsInstanceOf<RecordResponse> (response, "response is RecordResponse");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterRecords
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<int?> ids = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //bool? _continue = null;
            //bool? rollback = null;
            //string filter = null;
            //var response = instance.ReplaceMusicPromoterRecords(tableName, fields, related, ids, idField, idType, _continue, rollback, filter);
            //Assert.IsInstanceOf<RecordsResponse> (response, "response is RecordsResponse");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterRelationship
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string relationshipName = null;
            //var response = instance.ReplaceMusicPromoterRelationship(tableName, relationshipName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterRelationships
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterRelationshipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.ReplaceMusicPromoterRelationships(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterTable
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.ReplaceMusicPromoterTable(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test ReplaceMusicPromoterTables
        /// </summary>
        [Test]
        public void ReplaceMusicPromoterTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ReplaceMusicPromoterTables();
            //Assert.IsInstanceOf<TableSchemas> (response, "response is TableSchemas");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterField
        /// </summary>
        [Test]
        public void UpdateMusicPromoterFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string fieldName = null;
            //var response = instance.UpdateMusicPromoterField(tableName, fieldName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterFields
        /// </summary>
        [Test]
        public void UpdateMusicPromoterFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.UpdateMusicPromoterFields(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterRecord
        /// </summary>
        [Test]
        public void UpdateMusicPromoterRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //var response = instance.UpdateMusicPromoterRecord(id, tableName, fields, related, idField, idType);
            //Assert.IsInstanceOf<RecordResponse> (response, "response is RecordResponse");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterRecords
        /// </summary>
        [Test]
        public void UpdateMusicPromoterRecordsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //List<string> fields = null;
            //List<string> related = null;
            //List<int?> ids = null;
            //List<string> idField = null;
            //List<string> idType = null;
            //bool? _continue = null;
            //bool? rollback = null;
            //string filter = null;
            //var response = instance.UpdateMusicPromoterRecords(tableName, fields, related, ids, idField, idType, _continue, rollback, filter);
            //Assert.IsInstanceOf<RecordsResponse> (response, "response is RecordsResponse");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterRelationship
        /// </summary>
        [Test]
        public void UpdateMusicPromoterRelationshipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //string relationshipName = null;
            //var response = instance.UpdateMusicPromoterRelationship(tableName, relationshipName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterRelationships
        /// </summary>
        [Test]
        public void UpdateMusicPromoterRelationshipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.UpdateMusicPromoterRelationships(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterTable
        /// </summary>
        [Test]
        public void UpdateMusicPromoterTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tableName = null;
            //var response = instance.UpdateMusicPromoterTable(tableName);
            //Assert.IsInstanceOf<Success> (response, "response is Success");
        }
        
        /// <summary>
        /// Test UpdateMusicPromoterTables
        /// </summary>
        [Test]
        public void UpdateMusicPromoterTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UpdateMusicPromoterTables();
            //Assert.IsInstanceOf<TableSchemas> (response, "response is TableSchemas");
        }
        
    }

}
